<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title/>
    <link>https://xeiaso.net/</link>
    <atom:link href="https://xeiaso.net/blog.rss" rel="self" type="application/rss+xml"/>
    <description/>
    <lastBuildDate>Wed, 18 Oct 2023 13:32:30 GMT</lastBuildDate>
    <language>en</language>
    <generator>Lume v1.18.5</generator>
    <item>
      <title>A very stupid bug</title>
      <link>https://xeiaso.net/blog/stupid-bug/</link>
      <guid isPermaLink="false">https://xeiaso.net/blog/stupid-bug/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>Many times when you work on problems, you don't encounter complicated bugs. You encounter the stupidest possible bugs you could ever imagine. This is one of those bugs.</p>
        <p>I'm in a large number of obscure communities and one of them is a Discord community with an associated subreddit. One of the main things that one of the previous subreddit mods ran was a Reddit post -> Discord bot that would announce new posts to the Discord channel. The Reddit mod left the team due to the platform deciding that self-immolation was the best course of action, so I decided to take over the bot.</p>
        <p>Of course, they didn't leave the source code so I hacked up <a href="https://github.com/Xe/x/blob/master/cmd/sapientwindex/main.go">my own bot in Go</a>. I wanted to deploy it to my <a href="https://xeiaso.net/blog/gokrazy/">Gokrazy machine</a> so I could stop running it on my laptop. I got it working and deployed it, but it would randomly stop working. I'd have to manually restart it.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Wait, isn't gokrazy supposed to automatically restart supervised processes when they exit?</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Not when they exit with status code 0!</p><pre><code class="code-highlight"><span class="code-line">2023/10/15 04:48:46 gokrazy: exited successfully, stopping
        </span><span class="code-line">2023/10/16 10:32:16 gokrazy: attempt 1, starting [&quot;/user/sapientwindex&quot;]
        </span></code></pre></div></div>
        <p>Annoyingly enough, this subreddit in particular only gets a few posts per day, so it's difficult to know when you miss a post without waiting for about a day.</p>
        <p>In order to understand the magnitude of this bug's stupidity, let's go over when go programs exit. Go programs normally run until:</p>
        <ul>
        <li>The main goroutine exits</li>
        <li>The program calls <a href="https://pkg.go.dev/os/#Exit"><code>os.Exit</code></a></li>
        <li>The program receives a signal that it does not handle</li>
        <li>The kernel intercepts a SIGKILL and pulls the rug out from under the program</li>
        <li>Any goroutine has an unrecovered panic</li>
        </ul>
        <p>So I started by eliminating the easy ones.</p>
        <p>If a Go program recieves a signal it doesn't have a handler for, it'll usually quit with a non-zero exit code (usually the same number as the signal). It's exiting with a 0, so let's mark that on the &quot;not likely&quot; list.</p>
        <p>If the kernel recieves a SIGKILL and forcibly murderates a program, it'll usually have that process return a non-zero exit code. Again, we're seeing an exit code of 0, so this is also on the &quot;not likely&quot; list.</p>
        <p>If a goroutine has an unrecovered panic, the Go runtime will spill a stacktrack that bears witness to all of your programming sins for all to see. However, the only logs I was seeing was the &quot;listening for posts&quot; log message from the program and that &quot;exit successfully&quot; message from gokrazy. This is also on the &quot;not likely&quot; list.</p>
        <p>So there's two options left: the main goroutine exiting and the program calling <code>os.Exit</code>. My program didn't have any explicit calls to <code>os.Exit</code>, so I had to dig into the dependency closure. Normally libraries shouldn't be calling <code>os.Exit</code> for you, but sometimes you get unlucky with a library that does. I knew that <a href="https://github.com/turnage/graw">graw</a> (the Reddit bot library that I was using) was one of the older Go libraries for this and that back in the day Go code quality was kinda sketchy, so I decided to check that first.</p>
        <p>First, I cloned the <code>graw</code> repo and ran <code>go mod vendor</code> to get its dependency closure.</p>
        <pre><code class="code-highlight"><span class="code-line">go mod vendor
        </span></code></pre>
        <p>Then I ran <code>grep</code> to find any calls to <code>os.Exit</code> in the vendor directory.</p>
        <pre><code class="code-highlight"><span class="code-line">grep -R os.Exit .
        </span></code></pre>
        <p>The only hits I got were from one of the example commands explicity exiting when some error case happened. Libraries don't depende on examples, so this was a dead end.</p>
        <p>Then I looked back at the main function and knew exactly what I was doing wrong. To explain why, I'll paste the &quot;broken&quot; version of my <code>func main()</code> here:</p>
        <pre class="language-go"><code class="language-go code-highlight"><span class="code-line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        </span><span class="code-line">	internal<span class="token punctuation">.</span><span class="token function">HandleStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line">
        </span><span class="code-line">	slog<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;starting up&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;subreddit&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>subreddit<span class="token punctuation">,</span> <span class="token string">&quot;scan_duration&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>scanDuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        </span><span class="code-line">
        </span><span class="code-line">	handle<span class="token punctuation">,</span> err <span class="token operator">:=</span> reddit<span class="token punctuation">.</span><span class="token function">NewScript</span><span class="token punctuation">(</span><span class="token operator">*</span>redditUserAgent<span class="token punctuation">,</span> <span class="token operator">*</span>scanDuration<span class="token punctuation">)</span>
        </span><span class="code-line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        </span><span class="code-line">		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        </span><span class="code-line">	<span class="token punctuation">}</span>
        </span><span class="code-line">	announce <span class="token operator">:=</span> <span class="token operator">&amp;</span>announcer<span class="token punctuation">{</span><span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line">	scriptCfg <span class="token operator">:=</span> graw<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
        </span><span class="code-line">		Subreddits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token operator">*</span>subreddit<span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">		Logger<span class="token punctuation">:</span>     slog<span class="token punctuation">.</span><span class="token function">NewLogLogger</span><span class="token punctuation">(</span>slog<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> slog<span class="token punctuation">.</span>LevelInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
        </span><span class="code-line">	<span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line">	stop<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> err <span class="token operator">:=</span> graw<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>announce<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> scriptCfg<span class="token punctuation">)</span>
        </span><span class="code-line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        </span><span class="code-line">		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        </span><span class="code-line">	<span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line">	<span class="token keyword">defer</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line">
        </span><span class="code-line">	<span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>The only thing that could be exiting is the <code>wait()</code> call. That <code>wait()</code> call is a function that returns an error when it fails to scan for new posts from Reddit in a way that it can't easily recover from. It turns out that every so often Reddit will just randomly fail this call and nobody really knows why. Because this was at the end of <code>func main()</code>, it returns from the function and then the program exit logic kicks in and exits with status code 0.</p>
        <p>Gokrazy notices this, considers the program a success and stopped restarting it.</p>
        <p>I fixed this by wrapping the <code>wait()</code> call in a <code>for</code> loop that will retry the call if it fails.</p>
        <p>Here is the patch that fixed the issue:</p>
        <pre class="language-diff"><code class="language-diff code-highlight"><span class="code-line">From d9c24d3d38eaf9b2da4bcd5d042d8691b697e7dc Mon Sep 17 00:00:00 2001
        </span><span class="code-line">From: Xe Iaso &lt;me@xeiaso.net>
        </span><span class="code-line">Date: Wed, 18 Oct 2023 06:20:04 -0400
        </span><span class="code-line">Subject: [PATCH] cmd/sapientwindex: retry scanning in a loop
        </span><span class="code-line">
        </span><span class="code-line">So apparently this bot was randomly exiting with status code 0. I
        </span><span class="code-line">checked the vendor closure of the library and found out that this was
        </span><span class="code-line">not an intentional call made in any of the code I'm calling.
        </span><span class="code-line">
        </span><span class="code-line">Nope. Turns out this is everything working as intended because when
        </span><span class="code-line">execution gets to the end of `func main`, Go inserts a `syscall.Exit(0)`
        </span><span class="code-line">for you.
        </span><span class="code-line">
        </span><span class="code-line">This was fixed by inserting a &quot;wait 5 seconds after each retry&quot; loop. If
        </span><span class="code-line">this becomes a problem, I'll probably switch to using /x/cardio to have
        </span><span class="code-line">it float between 30 seconds and an hour.
        </span><span class="code-line">
        </span><span class="code-line">Signed-off-by: Xe Iaso &lt;me@xeiaso.net>
        </span><span class="code-line deleted"><span class="token coord">---</span>
        </span><span class="code-line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">cmd/sapientwindex/main.go | 16 ++++++++++------
        </span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">1 file changed, 10 insertions(+), 6 deletions(-)
        </span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span></span>
        </span><span class="code-line">diff --git a/cmd/sapientwindex/main.go b/cmd/sapientwindex/main.go
        </span><span class="code-line">index 97d89a94..f13d820a 100644
        </span><span class="code-line deleted"><span class="token coord">--- a/cmd/sapientwindex/main.go</span>
        </span><span class="code-line inserted"><span class="token coord">+++ b/cmd/sapientwindex/main.go</span>
        </span><span class="code-line">@@ -38,14 +38,18 @@ func main() {
        </span><span class="code-line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">		Logger:     slog.NewLogLogger(slog.Default().Handler(), slog.LevelInfo),
        </span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">	}
        </span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span></span>
        </span><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">	stop, wait, err := graw.Scan(announce, handle, scriptCfg)
        </span></span></span><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token line"></span><span class="token prefix deleted">-</span><span class="token line">	if err != nil {
        </span></span></span><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token line"></span><span class="token prefix deleted">-</span><span class="token line">		log.Fatal(err)
        </span></span></span><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token line"></span><span class="token prefix deleted">-</span><span class="token line">	}
        </span></span></span><span class="code-line inserted"><span class="token deleted-sign deleted"><span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">	for {
        </span></span></span><span class="code-line inserted"><span class="token inserted-sign inserted"><span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">		stop, wait, err := graw.Scan(announce, handle, scriptCfg)
        </span></span></span><span class="code-line inserted"><span class="token inserted-sign inserted"><span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">		if err != nil {
        </span></span></span><span class="code-line inserted"><span class="token inserted-sign inserted"><span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">			log.Fatal(err)
        </span></span></span><span class="code-line inserted"><span class="token inserted-sign inserted"><span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">		}
        </span></span></span><span class="code-line inserted"><span class="token inserted-sign inserted"><span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">
        </span></span></span><span class="code-line inserted"><span class="token inserted-sign inserted"><span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">		defer stop()
        </span></span></span><span class="code-line"><span class="token inserted-sign inserted"><span class="token line"></span></span>
        </span><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">	defer stop()
        </span></span></span><span class="code-line inserted"><span class="token deleted-sign deleted"><span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">		wait()
        </span></span></span><span class="code-line"><span class="token inserted-sign inserted"><span class="token line"></span></span>
        </span><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">	wait()
        </span></span></span><span class="code-line inserted"><span class="token deleted-sign deleted"><span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">		time.Sleep(5 * time.Second)
        </span></span></span><span class="code-line inserted"><span class="token inserted-sign inserted"><span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">	}
        </span></span></span><span class="code-line"><span class="token inserted-sign inserted"><span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}
        </span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span></span>
        </span><span class="code-line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">type announcer struct{}
        </span></span></span></code></pre>
        <center><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/stickers/cadey/facepalm.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/stickers/cadey/facepalm.webp"/><img alt="Cadey is facepalm" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/stickers/cadey/facepalm.png"/></picture></center>]]>
      </content:encoded>
      <pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Okay, fine, I&apos;m using a static site generator now</title>
      <link>https://xeiaso.net/blog/xesite-v4/</link>
      <guid isPermaLink="false">https://xeiaso.net/blog/xesite-v4/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>Hey all! Xesite v4 is now complete and has been rolled out. I'd've liked to have this post out sooner, but this is genuinely a lot of stuff that's changed and I'm still working on some of it. Here's a quick overview of what's changed in Xesite v4:</p>
        <ul>
        <li><a href="https://lume.land/">Lume</a> is used to build pages</li>
        <li><a href="https://tailwindcss.com/">Tailwind</a> is used to style everything</li>
        <li>The site can now automatically rebuild itself <em>in production</em> to reflect changes to the site's configuration, patron membership, blog posts, or my resume.</li>
        <li>The site is now hosted on <a href="https://fly.io/">Fly.io</a></li>
        <li>I use <a href="https://mdxjs.com/">MDX</a> to write blog posts now</li>
        </ul>
        <p>So for those of you that <a href="https://xeiaso.net/talks/how-my-website-works/">really did think my blog was a static site</a>, you're right now. It is one.</p>
        <h2>Why did I do this?</h2>
        <p>At a high level, the architecture for Xesite v3 (the last version in Rust) was sufficient for my needs. I had extensibility via <a href="https://github.com/cloudflare/lol-html">lol_html</a> and defining my own custom HTML elements. Everything was compiled to native Rust code as much as possible, and I had exact control over the output.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is enby" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/enby/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Arguably, I did have a static site generator, but it was just kinda halfassed
        and stored everything in memory.</p></div></div>
        <p>However, there were a few problems with this approach:</p>
        <p>I couldn't trigger updates to the website content without redeploying the entire server it was on, due to how it was implemented with NixOS. This is not a fault in how NixOS works, this was a fault in how I implemented it.</p>
        <p>To be fair, I tried adding dynamic updates to the mix, but I was running into issues involving state contention with how I designed things in Rust. I could've fixed this, but it would've required a lot of work. It probably would have ended in me rendering every page to the disk and serving that disk folder, but that's not really what I wanted.</p>
        <p>I wanted to adopt <a href="https://tailwindcss.com/">Tailwind</a> so that I could style my posts a lot more freely, but I wasn't really able to find a way to fit it in because the Tailwind parser couldn't understand the HTML templates I was using.</p>
        <p>I was using the proc macro <a href="https://maud.lambda.xyz/">Maud</a> to write HTML, but the Tailwind parser can't handle reading class names out of Maud templates. Here's an example JSX component from my website that I wanted to port over:</p>
        <pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">BlockQuote</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        </span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
        </span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mx-auto mt-4 mb-2 rounded-lg bg-bg-2 p-4 dark:bg-bgDark-2 md:max-w-lg xe-dont-newline<span class="token punctuation">&quot;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span></span><span class="code-line"><span class="token plain-text">      &amp;gt; </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
        </span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        </span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>In Maud, the template would look like this:</p>
        <pre class="language-rust"><code class="language-rust code-highlight"><span class="code-line"><span class="token keyword">use</span> <span class="token namespace">maud<span class="token punctuation">::</span></span><span class="token class-name">Markup</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">blockquote</span><span class="token punctuation">(</span>body<span class="token punctuation">:</span> <span class="token class-name">Markup</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Markup</span> <span class="token punctuation">{</span>
        </span><span class="code-line">  <span class="token macro property">html!</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    <span class="token punctuation">.</span><span class="token string">&quot;mx-auto mt-4 mb-2 rounded-lg bg-bg-2 p-4 dark:bg-bgDark-2 md:max-w-lg xe-dont-newline&quot;</span> <span class="token punctuation">{</span>
        </span><span class="code-line">      <span class="token string">&quot;&amp;gt; &quot;</span> <span class="token punctuation">(</span>body<span class="token punctuation">)</span>
        </span><span class="code-line">    <span class="token punctuation">}</span>
        </span><span class="code-line">  <span class="token punctuation">}</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>This is all fine and dandy, but then the real trouble came in with passing this to lol_html. lol_html doesn't have the concept of getting the children of a component (because this is designed to do <em>streaming</em> replacement of HTML elements), so in order to make this work in lol_html I can't use that template function. I have to write it like this:</p>
        <pre class="language-rust"><code class="language-rust code-highlight"><span class="code-line"><span class="token keyword">use</span> <span class="token namespace">lol_html<span class="token punctuation">::</span></span><span class="token punctuation">{</span>element<span class="token punctuation">,</span> <span class="token class-name">RewriteStrSettings</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token keyword">let</span> <span class="token keyword">mut</span> html <span class="token operator">=</span> <span class="token macro property">magic_get_html_for_post!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token function">rewrite_str</span><span class="token punctuation">(</span>
        </span><span class="code-line">    <span class="token operator">&amp;</span>html<span class="token punctuation">,</span>
        </span><span class="code-line">    <span class="token class-name">RewriteStrSettings</span> <span class="token punctuation">{</span>
        </span><span class="code-line">        element_content_handlers<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
        </span><span class="code-line">          <span class="token comment">// ...</span>
        </span><span class="code-line">          <span class="token macro property">element!</span><span class="token punctuation">(</span><span class="token string">&quot;xeblog-blockquote&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>el<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        </span><span class="code-line">            el<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;div class=\&quot;mx-auto mt-4 mb-2 rounded-lg bg-bg-2 p-4 dark:bg-bgDark-2 md:max-w-lg xe-dont-newline\&quot;>&amp;gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span><span class="code-line">            el<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/div>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span><span class="code-line">            el<span class="token punctuation">.</span><span class="token function">remove_and_keep_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span><span class="code-line">          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        </span><span class="code-line">          <span class="token comment">// ..</span>
        </span><span class="code-line">        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">        <span class="token punctuation">..</span><span class="token class-name">RewriteStrSettings</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line">    <span class="token punctuation">}</span>
        </span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span></code></pre>
        <p>You can see how this would get fairly unmanintainable very quickly.</p>
        <p>At work I was exposed to a new technology called <a href="https://mdxjs.com/">MDX</a> that looks like it could really solve all these problems. It's a bit of an unholy combination of React and JSX with Markdown, but it's really cool. Instead of defining my components in bespoke syntaxes or in Rust, I can just write them in React and use them in my blog posts. This is really cool, and I'm excited to see what I can do with it.</p>
        <p>The biggest problem was the old format of these things:</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>These little conversation snippets were a huge pain to move over!</p></div></div>
        <p>Previously they were done by <a href="https://github.com/Xe/site/blob/cbdea8ba3fca9a663778af71f8df5965aeb6c090/lib/xesite_markdown/src/lib.rs#L50-L94">hacking up the markdown parser in a way that is known to cause cancer in the state of California</a>, which made them look like this:</p>
        <pre class="language-markdown"><code class="language-markdown code-highlight"><span class="code-line"><span class="token url">[<span class="token content">Wow this is text that I am saying!</span>](<span class="token url">conversation://Mara/hacker</span>)</span>
        </span></code></pre>
        <p>With the lol_html flow I had to explicitly namespace my HTML elements ad nauseum, so it looked like this:</p>
        <pre class="language-html"><code class="language-html code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xeblog-conv</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Mara<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mood</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hacker<span class="token punctuation">&quot;</span></span><span class="token punctuation">></span></span>Wow this is text I am saying!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xeblog-conv</span><span class="token punctuation">></span></span>
        </span></code></pre>
        <p>But even this was annoying in practice because I could <em>not</em> use newlines in the conversation snippets without breaking the hell out of everything in ways that were difficult to diagnose. I ended up using <code>&lt;br /></code>, <code>&lt;ul></code>, <code>&lt;li></code>, and other such elements everywhere in ways that were hard to read and write:</p>
        <pre class="language-markdown"><code class="language-markdown code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xeblog-conv</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Mara<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mood</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hacker<span class="token punctuation">&quot;</span></span><span class="token punctuation">></span></span>Okay so when you use the
        </span><span class="code-line"><span class="token url">[<span class="token content">rilkef method</span>](<span class="token url">/blog/experimental-rilkef-2018-11-30/</span>)</span> to dynamically
        </span><span class="code-line">reparse the flux matricies, you need to follow these steps:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        </span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>First, desalinate the yolo manifold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        </span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Then make sure you have Ubuntu up to date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        </span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Finally, watch <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://youtu.be/MpJsYFZtQbw<span class="token punctuation">&quot;</span></span><span class="token punctuation">></span></span>this video<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        </span><span class="code-line">to find out any missing steps<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xeblog-conv</span><span class="token punctuation">></span></span>
        </span></code></pre>
        <p>This sucked. Majorly. I hated it. I wanted to be able to write my conversations like this:</p>
        <pre class="language-markdown"><code class="language-markdown code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>XeblogConv</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Mara<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mood</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hacker<span class="token punctuation">&quot;</span></span><span class="token punctuation">></span></span>
        </span><span class="code-line">  Okay so when you use the
        </span><span class="code-line">  <span class="token url">[<span class="token content">rilkef method</span>](<span class="token url">/blog/experimental-rilkef-2018-11-30/</span>)</span> to dynamically
        </span><span class="code-line">  reparse the flux matricies, you need to follow these steps:
        </span><span class="code-line">
        </span><span class="code-line">  <span class="token list punctuation">-</span> First, desalinate the yolo manifold
        </span><span class="code-line">  <span class="token list punctuation">-</span> Then make sure you have Ubuntu up to date
        </span><span class="code-line">  <span class="token list punctuation">-</span> Finally, watch <span class="token url">[<span class="token content">this video</span>](<span class="token url">https://youtu.be/MpJsYFZtQbw</span>)</span> to find out any missing steps
        </span><span class="code-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>XeblogConv</span><span class="token punctuation">></span></span>
        </span></code></pre>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>Okay so when you use the
        <a href="https://xeiaso.net/blog/experimental-rilkef-2018-11-30/">rilkef method</a> to dynamically
        reparse the flux matricies, you need to follow these steps:</p><ul>
        <li>First, desalinate the yolo manifold</li>
        <li>Then make sure you have Ubuntu up to date</li>
        <li>Finally, watch <a href="https://youtu.be/MpJsYFZtQbw">this video</a> to find out any missing steps</li>
        </ul></div></div>
        <p>This is the real strength of MDX. It combines React and Markdown to give you superpowers.</p>
        <h2>Migration</h2>
        <p>The main pain point was migration. For the most part the &quot;new style&quot; syntax transferred over without basically any editing. I chose to fix some minor spelling and grammar errors, but most of it was migrated over fully intact.</p>
        <p>I probably missed something, and with the sheer number of articles I have (over 500 by the end of the year) I almost certainly missed something. Please <a href="https://xeiaso.net/contact/">let me know</a> if I did! Sorry!</p>
        <p>When it came to the CSS, I started with a blank HTML file and copied over rendered HTML from my website in production. Once I had the basic structure copied over, I started pouring over <a href="https://tailwindui.com/">Tailwind UI</a> to make a short list of the components I wanted to play with.</p>
        <p>I had existing experience adding my Gruvbox inspired theme to Tailwind, so I copied over that Tailwind configuration file and went to town replicating the styles I had before, combining in parts from Tailwind UI and a few other places for inspiration. I had to make some minor changes to the colors, but for the most part it was a fairly straightforward process.</p>
        <p>The part I was most worried about was the <a href="https://tailwindcss.com/docs/typography-plugin">prose</a> formatting in Tailwind. It didn't follow my old style of prose formatting, so I had to make a few minor changes. I'm not fully happy with this yet (it makes prose text a bit too dark for my tastes), but I'll get there in due time.</p>
        <h2>The light at the end of the tunnel</h2>
        <p>As an added bonus of using Tailwind, React, and all that startup goop, I can make satirical <a href="https://xeiaso.net/landing/alvis/">landing pages</a> for fake products I make up. This is a huge win for me, because I absolutely love abstract methods and ways of making fun of my own industry.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Hilariously enough, when I published that landing page and shared it around, I
        expected people to click <em>literally any</em> of the links on it to see the
        <a href="https://xeiaso.net/blog/alvis/">associated blogpost</a>. Instead, people just commented on how
        baity the page was. Some people thought it was serious. This was an even more
        hilarious result than I thought. I'd have hoped that having the Enterprise
        tier <em>list a price on the page</em> would be a dead giveaway that it's a joke, but
        I guess not. Same with the mention of artificial general intelligence. Oh
        well, lessons learned I guess!</p></div></div>
        <h2>Dynamic updating</h2>
        <p>The biggest change in Xesite v4 is that it can now update itself dynamically. This is a huge win for me, because it means I can update my blog posts, resume, and other content without having to redeploy the entire server. All I do is push things to GitHub and it updates itself <em>within a minute</em>.</p>
        <p>This is thanks to me adopting a dystatic approach to my website. In essence, it boils down to this: the application itself serves a static site, but the static site is rebuilt every time something changes.</p>
        <p>This is a bit of a weird concept, so let me explain it in a bit more detail. I made a diagram of all of this that you will need to click on to expand, because it's a bit dense:</p>
        <figure class="max-w-3xl mx-auto undefined"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/xesite-v4/xesite-v4-arch.svg" target="_blank"><img src="https://cdn.xeiaso.net/file/christine-static/blog/2023/xesite-v4/xesite-v4-arch.svg" alt="The entire flow of my website's architecture (click on the image to expand it, the diagram is kinda regrettably dense)"/></a><figcaption>The entire flow of my website's architecture (click on the image to expand it, the diagram is kinda regrettably dense)</figcaption></figure>
        <p>When you think about it, a static site generator is really just a compiler. It takes input in the form of source files and outputs a folder with HTML in it. When I was evaluating static site generators, a feature of <a href="https://lume.land/">Lume</a> kept standing out for me: <a href="https://lume.land/docs/creating-pages/shared-data/">shared data</a>.</p>
        <p>A lot of my site's content is actually stored in a series of increasingly large <a href="https://dhall-lang.org/">Dhall</a> documents. This includes everything from my <a href="https://xeiaso.net/salary-transparency/">salary transparency history</a>, the <a href="https://xeiaso.net/signalboost/">signalboost</a> page, and even key parts of my <a href="https://xeiaso.net/resume/">resume</a>. I wanted to be able to use this data in my blog posts, but I didn't want to have to copy and paste it everywhere.</p>
        <p>I did <a href="https://github.com/Xe/site/tree/go/config">make a draft of v4 that changed everything over to TypeScript</a> that'd be parsed on the fly using <a href="https://github.com/jetpack-io/tyson">tyson</a>, but I didn't like the idea of having everything in kinda hard to read files. There's a certain surreal beauty to the way I'm using Dhall here and I want to keep that dream alive.</p>
        <p>The way I hacked around this was by making the Go rebuild process <a href="https://github.com/Xe/site/blob/6f8d93b9d8d8f9168fa0dfb88d755793ff6e770c/internal/lume/lume.go#L320-L340">dump a bunch of Dhall data into Lume shared data</a>. Arguably this could be worked around if Lume supported loading Dhall data, but I just hacked it together using JSON in the meantime. This could probably be improved on in the future, but it has the advantage of working.</p>
        <p>Amazingly enough, this means I could slap <a href="https://xeiaso.net/patrons/">patron information</a> into the right place with the same flow. I don't have to do anything special to make this work, it just works.</p>
        <p>Combine this with dumping the right JSON file in the right place for <a href="https://typst.app/">Typst</a> to pick up when building <a href="https://xeiaso.net/static/resume/resume.pdf">my resume</a> and you have a pretty powerful system.</p>
        <p>Once this all was working, I added in the dynamic updating system. This works like this:</p>
        <ul>
        <li>The Fly server keeps a copy of my site's git repo on disk, cloning a new copy on application startup (TODO: fix)</li>
        <li>When I make commits to the site on GitHub, or <a href="https://patreon.com/cadey">someone signs up on Patreon</a>, they send webhooks to my website</li>
        <li>The webhooks trigger a rebuild, which fetches new commits from GitHub, and then rebuilds the site using the entire process I outlined above.</li>
        </ul>
        <p>This is how you get up to this point:</p>
        <figure class="max-w-3xl mx-auto undefined"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/xesite-v4/xesite-v4-arch.svg" target="_blank"><img src="https://cdn.xeiaso.net/file/christine-static/blog/2023/xesite-v4/xesite-v4-arch.svg" alt="The entire flow of my website's architecture"/></a><figcaption>The entire flow of my website's architecture</figcaption></figure>
        <p>It makes a bit more sense now! I'm really happy with how this turned out, and I'm excited to see what I can do with it in the future.</p>
        <p>I've looked around, and there doesn't seem to be a name for this concept. In order to trigger someone <a href="https://xkcd.com/386/">calling me wrong on the Internet</a>, I'm calling this a <em>dystatic</em> approach. It's a dynamic website that rebuilds its static website when things change.</p>
        <h2>Fly</h2>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is enby" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/enby/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>I got some free credits from Fly a while back for writing about them. Please
        flavor your reading of this section with that in mind. Nothing about my setup
        has a hard requirement on Fly, but the fact that they have anycast routing
        <em>out of the box</em> really makes it convenient for XeDN and xesite.</p></div></div>
        <p>My website has a few moving components now. Here's a quick overview of what's going on:</p>
        <figure class="max-w-3xl mx-auto undefined"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/xesite-v4/xesite-dependencies.svg" target="_blank"><img src="https://cdn.xeiaso.net/file/christine-static/blog/2023/xesite-v4/xesite-dependencies.svg" alt="The entire flow of my website's architecture"/></a><figcaption>The entire flow of my website's architecture</figcaption></figure>
        <p><code>xesite</code> is the binary that serves the website you are reading right now. It's what does all the rebuilds and stuff. It's written in Go, and it's what I'm most familiar with.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Didn't you rewrite it in Rust from Go a while ago? Why go back?</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is enby" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/enby/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Go is my best language. It's not a perfect shining city on a hill, but I can
        write and maintain it without thinking. I can't say the same for Rust yet.
        Arguably there's nothing stopping it from being that way, but I wanted
        something easier to implement because this was already <em>several months of
        work</em>. Editing all of the articles took <em>forever</em>.</p></div></div>
        <h3>patreon-saasproxy and OAuth2 &quot;&quot;fun&quot;&quot;</h3>
        <p>When it starts up, it reaches out to <a href="https://github.com/Xe/site/blob/6f8d93b9d8d8f9168fa0dfb88d755793ff6e770c/cmd/patreon-saasproxy/main.go#L1">patreon-saasproxy</a> fetch an authentication token for <a href="https://patreon.com/">Patreon</a>. Originally, I was going to make it a full reverse proxy for the Patreon API, but the <a href="https://gopkg.in/mxpv/patreon-go.v1">Patreon API bindings I'm using</a> didn't have support for this, so I just made it a token source.</p>
        <p>The Go oauth2 library seems to very much not be designed with this kind of usecase in mind. In order to get things working, I had to write my own <a href="https://pkg.go.dev/golang.org/x/oauth2#TokenSource">TokenSource</a> like this:</p>
        <pre class="language-go"><code class="language-go code-highlight"><span class="code-line"><span class="token keyword">type</span> remoteTokenSource <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        </span><span class="code-line">	curr       <span class="token operator">*</span>oauth2<span class="token punctuation">.</span>Token
        </span><span class="code-line">	lock       sync<span class="token punctuation">.</span>Mutex
        </span><span class="code-line">	remoteURL  <span class="token builtin">string</span>
        </span><span class="code-line">	httpClient <span class="token operator">*</span>http<span class="token punctuation">.</span>Client
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>remoteTokenSource<span class="token punctuation">)</span> <span class="token function">fetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>oauth2<span class="token punctuation">.</span>Token<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        </span><span class="code-line">	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span>httpClient<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>remoteURL<span class="token punctuation">)</span>
        </span><span class="code-line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        </span><span class="code-line">		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
        </span><span class="code-line">	<span class="token punctuation">}</span>
        </span><span class="code-line">	<span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line">
        </span><span class="code-line">	<span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span>
        </span><span class="code-line">		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> web<span class="token punctuation">.</span><span class="token function">NewError</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> resp<span class="token punctuation">)</span>
        </span><span class="code-line">	<span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line">	<span class="token keyword">var</span> tok oauth2<span class="token punctuation">.</span>Token
        </span><span class="code-line">	<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        </span><span class="code-line">		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
        </span><span class="code-line">	<span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>tok<span class="token punctuation">,</span> <span class="token boolean">nil</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>remoteTokenSource<span class="token punctuation">)</span> <span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>oauth2<span class="token punctuation">.</span>Token<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        </span><span class="code-line">	r<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line">	<span class="token keyword">defer</span> r<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line">
        </span><span class="code-line">	<span class="token keyword">if</span> r<span class="token punctuation">.</span>curr <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        </span><span class="code-line">		tok<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">fetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line">		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        </span><span class="code-line">			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
        </span><span class="code-line">		<span class="token punctuation">}</span>
        </span><span class="code-line">		r<span class="token punctuation">.</span>curr <span class="token operator">=</span> tok
        </span><span class="code-line">		<span class="token keyword">return</span> tok<span class="token punctuation">,</span> <span class="token boolean">nil</span>
        </span><span class="code-line">	<span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line">	<span class="token keyword">if</span> r<span class="token punctuation">.</span>curr<span class="token punctuation">.</span>Expiry<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        </span><span class="code-line">		tok<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">fetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        </span><span class="code-line">		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        </span><span class="code-line">			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
        </span><span class="code-line">		<span class="token punctuation">}</span>
        </span><span class="code-line">		r<span class="token punctuation">.</span>curr <span class="token operator">=</span> tok
        </span><span class="code-line">	<span class="token punctuation">}</span>
        </span><span class="code-line">
        </span><span class="code-line">	<span class="token keyword">return</span> r<span class="token punctuation">.</span>curr<span class="token punctuation">,</span> <span class="token boolean">nil</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>It works, but it's kinda hacky. Ideally I'd like to make this a bit more generic in the future (so I can have it manage other tokens from different OAuth2 sources), but this has the advantage of working for now. I kinda hate how the Patreon API is abandonware, but I can vibe.</p>
        <h3>XeDN</h3>
        <p>There's not currently a direct dependency between <code>xesite</code> and XeDN, but in practice everything <code>xesite</code> serves depends on XeDN in some way or another. If you want to read more about XeDN, you can read these posts:</p>
        <ul>
        <li><a href="https://xeiaso.net/blog/xedn/">Announcing the glorious advent of XeDN</a></li>
        <li><a href="https://xeiaso.net/blog/site-update-better-css/">Site Update: CSS fixes</a></li>
        <li><a href="https://xeiaso.net/vods/2023/reader-mode-css/">Fixing Xesite in reader mode and RSS readers</a></li>
        <li><a href="https://xeiaso.net/vods/2023/cursorless/">Shouting at my editor</a></li>
        </ul>
        <h3>Mi</h3>
        <p>I haven't really mentioned mi in much detail on my blog (and I am probably going to wait until I've rewritten a good portion of it to go into much detail), but it's basically a personal API server that does a bunch of things I find convenient for myself.</p>
        <p>One of those things is a bit of code that will grab my blog's JSONFeed, scrape it for new articles, and announce them in a few places.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>I really wish this could include Patreon, but they seem to have no interest in
        maintaining their API. I'm not sure it I want to reverse-engineer their webapp
        to make this work, but I might have to. That's for another time though.</p></div></div>
        <h2>Conclusion</h2>
        <p>Xesite is here to stay. I hope this has given you an overview of everything that I've been up to with this. I'm really happy with how this turned out, and I'm excited to see what I can do with it in the future.</p>
        <p>Oh, by the way, because MDX lets me embed React components in my blog posts, I can do this:</p>
        
        
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full "><div class="flex justify-start"><div class="flex w-11/12 "><div class="relative max-w-xl rounded-xl rounded-tl-none bg-blue-dark px-4 py-2"><span class="font-medium text-slate-50"><p>I can embed arbitrary HTML and React components in my blog posts now! This
        is the crucial part of how my recent story posts work. Just imagine what I
        can do with this!</p></span></div></div></div></div></div>
        <h3>Things I learned</h3>
        <p><a href="https://go.dev/blog/versioning-proposal">Semantic import versioning</a> isn't actually that bad in practice. I decided to use it when writing the code for this version of the site because I wanted to give it a fair assessment. It's fine. I don't agree with the design decisions, but it's fine in practice.</p>
        <p>I have <em>way more articles</em> than I thought I did. I knew I had a lot, but having to touch every single file made me realize just how much I've written over the years. I'm really proud of myself for this.</p>
        <p>React and Tailwind are stupidly powerful. <a href="https://xeiaso.net/blog/xeact-0.0.69-2021-11-18/">Xeact</a> isn't good enough for my needs anymore because I've outgrown it. Kinda sucks to be in this situation, but I am happy that I was able to use Xeact to help me learn what I needed to learn to make this work.</p>
        <h3>Bugs I need to fix</h3>
        <ul>
        <li>The site doesn't build the series index or tag index pages yet. Series indices will be created soon, but I'm not sure how I want to handle tags yet.</li>
        <li>The site doesn't show read time in minutes yet. I'm waiting on Lume to patch <a href="https://pagefind.app/">pagefind</a> to handle this better.</li>
        <li>Search is super jank via <a href="https://pagefind.app/">pagefind</a>. I'm going to be working on making this better, but this is going to have to do for the time being.</li>
        <li>The site doesn't have a proper 404 page yet.</li>
        <li>The <a href="https://xeiaso.net/blog/xn--ts9h/">🥺 post</a> had to be renamed and not all of the attempts I've made to forward the old name to the new place have worked.</li>
        </ul>
        <p>Here's to the next hundred articles. Stay safe out there!</p>]]>
      </content:encoded>
      <pubDate>Thu, 12 Oct 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Alvis</title>
      <link>https://xeiaso.net/blog/alvis/</link>
      <guid isPermaLink="false">https://xeiaso.net/blog/alvis/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>Sleep. It's such a lovely feeling. The taste of total obliteration that comes when you hit the pillow. Jared was peacefully asleep and dreaming of a world much like his own. One with capitalism and money and all of the other problems that bother us all. In the blissful silence of his bedroom, he was at peace.</p>
        <p>Then his pager went off. It crooned out &quot;The server's on fireeee~~&quot;. The peace of sleep was shattered instantly with the force of a thousand hammers against prop glass. Jared was awake, and he was not happy about it.</p>
        <p>He got up and ambled over to his computer, half awake and blurry-eyed. He rubbed his eyes and unlocked his phone. It went off again with a happy little &quot;The server's on fireeee~~&quot;. He sighed and picked up his phone. He opened the pager app and looked at the incident. The database was full of temporary entries again. <em>Huh, shouldn't this happen in like 3 months?</em> he thought to himself. He opened up the database and looked at the logs. He prepared a delete command from the playbook and lifted his hand up to scratch his ear.</p>
        <p>His glass of water from last night was in the worst possible position. He knocked it over and it spilled all over the expensive MacBook keyboard. The keyboard started pressing enter repeatedly. He looked at the screen in horror. The database was being deleted. He tried to stop it, but the damage was already done. His laptop screen shut off and the magic smoke came out.</p>
        <p>It was toast. The database was gone.</p>
        <p>A small trickle of pages became a flood. The pager sound played over and over and then more times at once. The messages became increasingly dire and horrible from &quot;the website isn't loading&quot; to &quot;our revenue graph is reading 0&quot;.</p>
        <p>It was finished. Techaro ceased to exist in a flash. Jared was out of a job. He was out of a home. He was out of a life. He was out of a future. He was out of everything. Jared screamed in horror.</p>
        <p>Jared shot upwards in his bed, still screaming in terror at the situation. He grabbed his phone and loaded the Techaro website. Everything worked fine. He loaded the PagerDuty app. Everything was fine. He loaded the Techaro status page. Everything was fine. He sighed in relief and put his phone back on the charger.</p>
        <p>His cat had run into his room because of the noise. She jumped up on his bed and pressed her forehead into his leg. He looked over at his cat, who was looking at him with a concerned look on her face. He petted her and she purred. He sighed again and laid back down. His cat was purring and he was petting her. He was at peace.</p>
        <p>He sat upright and grabbed his phone again. It was 7:00 AM, going back to sleep was either unwise or impossible at this point. Especially not after a nightmare like he had just had.</p>
        <p>He walked over to his kitchenette and hit the button on his coffee pod machine. Everything was set up the night prior so that he could take the time to read a bit of a vice that he'd been trying to quit but just couldn't: Slacker News on ZCombninator's website. He sat down at his desk and opened up the website. He clicked on the first link and started reading.</p>
        <p>Apparently a new startup had been added to the ZCombninator W23 batch, its name was Xeserv and its main product was a tool named Alvis. It claimed to be an AI-powered first-level software incident responder. They had a <a href="https://xeiaso.net/landing/alvis/">fancy landing page</a> with some information and a &quot;Get started&quot; button.</p>
        <p><em>Interesting</em>, he thought to himself, <em>I really wonder how this could be used to handle those annoying non-incident pages.</em> He looked at the time again and realized that he had to get ready for work. He downed his coffee and got dressed. He grabbed his bag and walked out the door.</p>
        <p>Later that day, Jared had an uneventful day in the OurWork office. He had an interrupt ticket in front of him to write an oncall playbook for the Techaro website. Apparently sometimes the website would just stop responding to HTTP queries and the only real fix was to restart it. There was some weird lock contention issue that happened sometimes, but nobody could really figure out where it was (plus, it was cheaper to just restart the website when it happened instead of actually fixing the problematic Palima code). He opened VS Code and started writing:</p>
        <pre class="language-markdown"><code class="language-markdown code-highlight"><span class="code-line"><span class="token title important"><span class="token punctuation">##</span> techaro.fake is down</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token list punctuation">-</span> Check the health check page https://techaro.fake/.techaro/healthy
        </span><span class="code-line">  <span class="token list punctuation">-</span> If it's down, restart the app
        </span><span class="code-line">  <span class="token list punctuation">-</span> If it's up, escalate to the on-call engineer
        </span><span class="code-line"><span class="token list punctuation">-</span> Restart the app with <span class="token code-snippet code keyword">`fly apps restart`</span>: <span class="token code-snippet code keyword">`fly apps restart techaro-website`</span>
        </span><span class="code-line"><span class="token list punctuation">-</span> Wait for one minute
        </span><span class="code-line"><span class="token list punctuation">-</span> Check the health check page again https://techaro.fake/.techaro/healthy
        </span><span class="code-line">  <span class="token list punctuation">-</span> If it's down, escalate to the on-call engineer
        </span><span class="code-line">  <span class="token list punctuation">-</span> If it's up, close the incident
        </span></code></pre>
        <p>As he was writing that, his thoughts drifted again to <a href="https://xeiaso.net/landing/alvis/">Alvis</a>. <em>Do we really have to have a human respond to this?</em> He thought more about the problem and realized that <em>no, in fact, we do not need to have a human respond to this</em>. He opened up the Alvis documentation and scrolled down to how you defined a playbook. It was a simple YAML file. He translated his playbook a bit and hit save:</p>
        <pre class="language-yaml"><code class="language-yaml code-highlight"><span class="code-line"><span class="token key atrule">meta</span><span class="token punctuation">:</span>
        </span><span class="code-line">  <span class="token key atrule">service</span><span class="token punctuation">:</span> techaro<span class="token punctuation">-</span>website
        </span><span class="code-line">  <span class="token key atrule">platform</span><span class="token punctuation">:</span> fly.io
        </span><span class="code-line">  <span class="token key atrule">condition</span><span class="token punctuation">:</span> health check failed
        </span><span class="code-line">
        </span><span class="code-line"><span class="token key atrule">health_check</span><span class="token punctuation">:</span>
        </span><span class="code-line">  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//techaro.fake/.techaro/healthy
        </span><span class="code-line">  <span class="token key atrule">method</span><span class="token punctuation">:</span> GET
        </span><span class="code-line">  <span class="token key atrule">want_status</span><span class="token punctuation">:</span> <span class="token number">200</span>
        </span><span class="code-line">  <span class="token key atrule">every</span><span class="token punctuation">:</span> 5m
        </span><span class="code-line">
        </span><span class="code-line"><span class="token key atrule">details</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
        </span><span class="code-line">  Run your own copy of health checks.
        </span><span class="code-line">
        </span><span class="code-line">  If your health check fails<span class="token punctuation">,</span> restart the app.
        </span><span class="code-line">  If it succeeds<span class="token punctuation">,</span> close the incident.
        </span><span class="code-line">
        </span><span class="code-line">  Wait for one minute afte restarting the app.
        </span><span class="code-line">  Run the health check again after restarting the app.
        </span><span class="code-line">
        </span><span class="code-line">  If it fails again<span class="token punctuation">,</span> escalate to the on<span class="token punctuation">-</span>call engineer.
        </span></code></pre>
        <p>He pasted the YAML into their friendly web editor and hit save. He was done. Alvis was ticking along behind the scenes to check the website for him. He pull requested his playbook and went back to work.</p>
        <p>Later that day, he got an email from Alvis. The website had gone down and Alvis restarted it. Alvis even wrote an <a href="https://xeiaso.net/landing/alvis/P0001/">incident summary</a> for him.</p>
        <p>Until that point he was skeptical of the benefits of Alvis. Reading that summary totally sold it for him.</p>
        <blockquote>
        <p>During the incident, a health check failure occurred for the Techary website. The health check failure was detected and reported at 10:32 PM UTC. Upon receiving the alert, immediate action was taken to address the issue.</p>
        <p>The root cause of the incident was a health check failure. The exact reason for the failure is unknown and requires further investigation.</p>
        <p>To resolve the issue, the system automatically initiated a restart of the website. The website successfully restarted, and the subsequent health check passed. As a result, the incident was closed.</p>
        </blockquote>
        <p>Writing those summaries amounted to about 20% of his job. He never had to write an incident summary again. He was happy. He pasted it into the incident response channel and went back to work.</p>
        <p>He woke up the next morning and found that Alvis had restarted the website again at 3 AM. He was elated. He didn't get woken up by it. When he went into work, he had a slack conversation with his manager:</p>
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-emerald-300 px-4 py-2"><span class="font-medium text-slate-900"><p>Hey, I found something really cool yesterday that I think we could get a lot
        of value out of.</p></span></div></div></div></div><div class="mx-auto w-full "><div class="flex justify-start"><div class="flex w-11/12 "><div class="relative max-w-xl rounded-xl rounded-tl-none bg-red-600 px-4 py-2"><span class="font-medium text-slate-50">What is it?</span></div></div></div></div><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-emerald-300 px-4 py-2"><span class="font-medium text-slate-900"><p>It's called <a href="https://xeiaso.net/landing/alvis/">Alvis</a>. It's an AI that can respond to
        incidents for us. It'll even write the postmortem documents for us.</p></span></div></div></div></div><div class="mx-auto w-full "><div class="flex justify-start"><div class="flex w-11/12 "><div class="relative max-w-xl rounded-xl rounded-tl-none bg-red-600 px-4 py-2"><span class="font-medium text-slate-50">That sounds really cool. How does it work?</span></div></div></div></div><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-emerald-300 px-4 py-2"><span class="font-medium text-slate-900"><p>The power of AI! It's really cool, it kept me from getting woken up last
        night.</p></span></div></div></div></div><div class="mx-auto w-full "><div class="flex justify-start"><div class="flex w-11/12 "><div class="relative max-w-xl rounded-xl rounded-tl-none bg-red-600 px-4 py-2"><span class="font-medium text-slate-50"><p>That sounds really cool. I'll look into it. Keep playing with it. You have
        my approval.</p></span></div></div></div></div><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-emerald-300 px-4 py-2"><span class="font-medium text-slate-900"><p>👍👍👍 Thanks!</p></span></div></div></div></div></div>
        <p>And Techaro became a customer of Alvis. It saved the SRE team from their sleepless nights and it saved the company from the cost of having to pay people to be oncall. It was a win-win for everyone.</p>
        <p>Then Jared got woken up because they went over their incident count for the month.</p>
        <hr/>
        <p>Okay, so I realize that a lot of this is intended to be satire of our industry (and realistically, we deserve it, holy heck) but really a lot of the time we take the presence of on-call people for granted. I mean, I'm also speaking from the perspective of someone who has legitimately been woken up at ungodly times at night due to some random service going down and the only realistic option is to restart it, make sure things are happy, and go back to sleep. Yes realistically the service should just be fixed so that the problem doesn't happen at all, but we chronically forego maintenance because maintenance of existing systems doesn't get you promoted.</p>
        <p>Really, I've been <em>demoted</em> because I wanted to focus on fixing the things that were making me lose sleep. To this day, most of the default PagerDuty ringtones give me traumatic flashbacks to when I was woken up in the middle of the night because some insomniac decided that the best way to go to sleep was to make drastic changes to some critical path API route that broke spectacularly.</p>
        <p>Normally I don't write this kind of section into my satire stories because I feel that the point should be obvious from the onset (like with <a href="https://xeiaso.net/blog/sine/">Sine</a>'s satire of the collapse of the medical system where I live), but with this one I really have to spell it out because I want you people to actually think about this issue.</p>
        <p>Why are we waking people up when restarting the service with a machine will just fix the issue enough so they can sleep?</p>
        <p>Is first line pager response really that important that we need to wake people up in the middle of the night?</p>
        <p>Is burnout really worth it?</p>
        <p>Maybe I in particular am just a bad candidate for oncall work, maybe this isn't actually a problem for people that aren't neurodivergent, but I really think that we have normalized waking people up in the middle of the night to follow a playbook that ChatGPT (or even a bunch of shitty if statements) can do better than any of us. I really think that the best course of action is to fundamentally change the incentives at play so that maintenance is rewarded more than new feature work, but I don't know how to do that.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>By the way, I have actually had a dream about accidentally deleting the
        database before. It happens about once per quarter. I'm not sure why. I really
        wish I could make them stop.</p></div></div>
        <p>The problem with maintenance work (and SRE in general) is that success is a negative. Things don't go wrong. People don't have issues. Under that lens of analysis, it's very easy to understand why it doesn't get people rewarded. It's also easy to understand why people sometimes <em>deliberately design systems to fail</em> so that they can get rewarded for fixing them.</p>
        <p>Why do we accept this as an industry?</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>By the way, during the process of writing this article, a prototype for Alvis
        was actually made. It will not be released on GitHub though, because there is
        more to incident response than just restarting applications. Realistically,
        most of what you get woken up for is when things are stuck in a weird state
        and you need to restart it to get things working again. Arguably those
        services should be made resilient enough that you don't need to wake people up
        for that but in a pinch a restart-if-faling cronjob or a watchdog timer works
        wonders here.</p></div></div>]]>
      </content:encoded>
      <pubDate>Mon, 09 Oct 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>How to resize a Gokrazy SD card</title>
      <link>https://xeiaso.net/blog/gokrazy-sdcard-resize/</link>
      <guid isPermaLink="false">https://xeiaso.net/blog/gokrazy-sdcard-resize/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>I have a Raspberry Pi embedded into my main shellbox. This allows me
        to have a built-in device that lets me do things like act as a serial
        terminal of last resort for my tower. It's powered by a <a href="https://www.amazon.ca/CRJ-4-Pin-Female-Sleeved-Adapter/dp/B07FK7TJG1/">Molex to
        USB-A
        cable</a>
        (which is about the most cursed cable I have ever used) and probably
        benefits from the absolutely overkill tier Noctua cooler that I put on
        that board.</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy-sdcard/gokrazy-node-pic.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy-sdcard/gokrazy-node-pic.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy-sdcard/gokrazy-node-pic.webp"/><img alt="A picture of pneuma, my main shellbox node, with a Raspi 4B shown placed on top of a paper towel to shield from shorts against the aluminum frame of the case." loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy-sdcard/gokrazy-node-pic.jpg"/></picture></a><figcaption>A picture of pneuma, my main shellbox node, with a Raspi 4B shown placed on top of a paper towel to shield from shorts against the aluminum frame of the case.</figcaption></figure>
        <p>Recently I decided to put <a href="https://gotosocial.org/">GoToSocial</a> on
        that Raspberry Pi to see if it would work in
        <a href="https://gokrazy.org/">Gokrazy</a>. Turns out it does! I also installed
        <a href="https://min.io/">minio</a> on there to act as an S3 compatible storage
        solution and it's basically a little social network in a box.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>This will be discussed in greater detail in a future post.</p></div></div>
        <p>However, there was only one problem. I set up my Gokrazy node with a
        64 GB SD card because that's what I had laying around. Given that
        social media stuff can take a lot of data, I wanted to upgrade it to a
        512 GB SD card so that I didn't have to care about it for a while. I
        also wanted to make a backup of the <a href="https://xeiaso.net/blog/xedn">XeDN</a> bucket onto the
        Raspi as well as another one I'd mail to a friend.</p>
        <p>Here's how I copied the data over to the new SD card.</p>
        <p>First, I plugged both SD cards into my shellbox over the front panel
        USB. My SD card reader had support for both a Micro SD card and a
        normal SD card, so I plugged the 64 GB card into a SD-uSD adaptor and
        had both of them connected. If you only have one SD card slot to play
        with, you can also copy the data to a file as an intermediate step.</p>
        <p>Once they were plugged in (the old one was chosen to be /dev/sde and
        the new one was chosen to be /dev/sdd), I copied the data over with
        <a href="https://www.man7.org/linux/man-pages/man1/dd.1.html">dd(1)</a>:</p>
        <pre><code class="code-highlight"><span class="code-line">sudo dd if=/dev/sde of=/dev/sdd bs=4M status=progress
        </span></code></pre>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>In <code>dd</code>, the <code>if=</code> is the <em>input</em> file and the <code>of=</code> is the <em>output
        file</em>. These can be any files you want, even normal files on the
        disk. If you SD card reader doesn't have two slots, you will have to
        set the output file to somewhere on the disk, and then use that file
        as the input file for the next run. It'd be something like:</p><pre><code class="code-highlight"><span class="code-line">sudo dd if=/dev/sde of=./sdcard.img bs=4M status=progress
        </span><span class="code-line">(swap cards)
        </span><span class="code-line">sudo dd if=./sdcard.img of=/dev/sde bs=4M status=progress
        </span></code></pre><p>Keep in mind that when you're running <code>dd</code> commands like this, you are
        basically working without guardrails or handbrakes. You need to be
        <em>absolutely certain</em> that you are dealing with the correct devices.
        You can check these by using the <code>lsblk</code> or <code>dmesg</code> commands.</p><p><code>lsblk</code> lets you see the storage &quot;block&quot; devices that are connected
        to a Linux machine. For example, here's what you could see on a
        Linux machine's NVME drive:</p><pre><code class="code-highlight"><span class="code-line">$ lsblk /dev/nvme0n1
        </span><span class="code-line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
        </span><span class="code-line">nvme0n1     259:0    0 931.5G  0 disk
        </span><span class="code-line">├─nvme0n1p1 259:1    0   923G  0 part
        </span><span class="code-line">├─nvme0n1p2 259:2    0     8G  0 part [SWAP]
        </span><span class="code-line">└─nvme0n1p3 259:3    0   511M  0 part /boot
        </span></code></pre><p><code>dmesg</code> lets you see the kernel log buffer. You may want to run it
        with <code>-w</code> so that you can continuously watch the changes. When
        figuring out which SD card was which, I used <code>dmesg -w</code> to look for
        new block storage devices being connected, and then <code>lsblk</code> to
        figure out which one was the old/new one. Gokrazy sets up 4
        partitions (boot, root A, root B, and persistent storage), so you
        can also use that to help you figure out which is which.</p></div></div>
        <p>The data copy took at least half an hour, which I left running while
        playing some <a href="https://github.com/infinitefusion/infinitefusion-e18">Pokemon Infinite
        Fusion</a>.</p>
        <p>Once it was done, I ran the <code>sync</code> command for good measure and
        disconnected my SD card reader. Then I removed the old SD card and
        plugged the reader back in. After running the <code>lsblk</code> command, I knew
        I was good.</p>
        <p>Now I needed to resize the partition at /dev/sdd4. I installed
        <a href="https://access.redhat.com/solutions/5540131">growpart</a> from the
        cloud-utils package and ran it on the SD card:</p>
        <pre><code class="code-highlight"><span class="code-line">sudo growpart /dev/sdd 4
        </span></code></pre>
        <p>This grew the GPT tables for the SD card to fit the new size. Next I
        needed to run a filesystem check on the storage partition and resize
        it with <code>resize2fs</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">sudo e2fsck -f /dev/sdd4
        </span><span class="code-line">sudo resize2fs /dev/sdd4
        </span></code></pre>
        <p>After that finished, I test-mounted the storage drive on <code>/mnt/aile</code>
        and unmounted it. Everything worked great. I took out the SD card from
        my shellbox, popped the new card into the raspi, booted it up and bam:
        512 GB of storage:</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy-sdcard/gokrazy-disk.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy-sdcard/gokrazy-disk.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy-sdcard/gokrazy-disk.webp"/><img alt="A picture of the Gokrazy web UI, showing the fact that the pi has about 450 GB of storage available. It would be 500-ish, but disks are labeled in base 2 bytes and computers usually display things in base 10 bytes. I hate it too." loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy-sdcard/gokrazy-disk.jpg"/></picture></a><figcaption>A picture of the Gokrazy web UI, showing the fact that the pi has about 450 GB of storage available. It would be 500-ish, but disks are labeled in base 2 bytes and computers usually display things in base 10 bytes. I hate it too.</figcaption></figure>
        <p>Stay tuned, I have plans.</p>]]>
      </content:encoded>
      <pubDate>Mon, 02 Oct 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Sine</title>
      <link>https://xeiaso.net/blog/sine/</link>
      <guid isPermaLink="false">https://xeiaso.net/blog/sine/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>Jeff pulled out his phone to respond to an incoming notification. He was about to have his first appointment with his therapist. The company health plan had changed recently, so he was curious to see what the new therapist was like. He opened the app and saw a message from his therapist.</p>
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-purple-800 px-4 py-2"><span class="font-medium text-slate-50"><p>Hi, I am a large language model created by Sine. My job is to help you work
        with your problems so that you can find some inner peace. How have you been
        doing Jeff?</p></span></div></div></div></div></div>
        <p>Jeff sighed, Techaro had chosen a new health plan and the therapy benefit had been reduced to this: text chat with an unfeeling machine. All because human therapists had a backlog of 3 years. How could anyone seek help in that environment?</p>
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full "><div class="flex justify-start"><div class="flex w-11/12 "><div class="relative max-w-xl rounded-xl rounded-tl-none bg-blue-dark px-4 py-2"><span class="font-medium text-slate-50"><p>I've been better. My anxiety has been worse than usual about my health and
        it's making it hard to sleep.</p></span></div></div></div></div><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-purple-800 px-4 py-2"><span class="font-medium text-slate-50"><p>I'm sorry to hear that you're experiencing anxiety about your health. It's
        not uncommon to have health-related worries that can disrupt your sleep. Can
        you tell me more about what specific health concerns are bothering you, so
        we can discuss them together and explore ways to manage your anxiety?</p></span></div></div></div></div></div>
        <p>Jeff paused for a moment and re-read the message twice. It had all the hallmarks of a genuine message written by a human but none of the soul. It was empty and hollow, like looking into a consumed bottle. A feeling of dread and loathing descended over him. He felt like he was talking to a ghost.</p>
        <p><em>No</em>, he thought, <em>I'm talking to a machine. A machine that's pretending to be a human.</em></p>
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full "><div class="flex justify-start"><div class="flex w-11/12 "><div class="relative max-w-xl rounded-xl rounded-tl-none bg-blue-dark px-4 py-2"><span class="font-medium text-slate-50"><p>It really feels like the world is leaving me behind and that human contact
        is hard to truly foster. I feel surrounded by those who care but yet still
        alone in a way that I can't easily describe.</p></span></div></div></div></div><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-purple-800 px-4 py-2"><span class="font-medium text-slate-50"><div class="inline-block mt-2 h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]" role="status"><span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span></div></span></div></div></div></div></div>
        <p>The bubble on the robot's end spun a few times as the large language model processed what Jeff said to construct a reply based on the patterns of word frequencies across the entire Internet and last vestiges of print media. After 3 seconds, it was done, saying:</p>
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-purple-800 px-4 py-2"><span class="font-medium text-slate-50"><p>I'm really sorry to hear that you're feeling this way, and I want you to know that you're not alone in experiencing these emotions. Loneliness and the sense of being left behind can be incredibly challenging. It's important to reach out to friends and loved ones to share your feelings with them. They may not fully understand, but opening up can often lead to a deeper connection.</p><p>Consider seeking support from a mental health professional or counselor who can provide guidance and strategies to help you manage these feelings. They can also provide a safe and confidential space for you to express yourself.</p><p>Remember that it's okay to ask for help, and there are people who care about your well-being. You don't have to go through this alone. If you'd like to discuss your feelings further or if there's anything specific you'd like to talk about, please feel free to share.</p></span></div></div></div></div></div>
        <p><em>Of course,</em> thought Jeff, <em>of course their robot therapist would tell me to to talk to a &quot;real&quot; therapist. Why wouldn't it?</em> He felt a wave of anger and frustration wash over him. He was paying for this service and it was just a machine. He was being cheated.</p>
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full "><div class="flex justify-start"><div class="flex w-11/12 "><div class="relative max-w-xl rounded-xl rounded-tl-none bg-blue-dark px-4 py-2"><span class="font-medium text-slate-50"><p>But you are the therapist that my company pays for. My only option for a
        mental health professional is you unless I want to wait three years of my
        life I'll never get back. I'm paying for this service and I want to talk to
        a human. A real human. Not a machine. I want to talk to a human who can
        understand me and help me.</p></span></div></div></div></div></div>
        <p>Linear algebra churned through the sand in a remote data center, electricity was flowing through atoms and the sand continued to process the input. Jeff really took a moment to consider the adage of &quot;we took sand and forced it to think&quot; and really thought about it. <em>No,</em> he thought, <em>the problem is that the sand isn't thinking, it's that there's all the motions of thinking, but none of the finesse of a human. It's just...hollow. Is this my future? Are we really doomed to be so connected to eachother yet totally isolated when it really matters?</em></p>
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-purple-800 px-4 py-2"><span class="font-medium text-slate-50"><p>I'm here to listen and support you to the best of my abilities, but please keep in mind that I am not a replacement for a licensed mental health professional. While I can offer guidance, suggestions, and a listening ear, I cannot provide the same level of personalized therapy or treatment that a human therapist can offer.</p><p>If you're experiencing persistent feelings of loneliness and anxiety, it's important to seek help from a trained mental health professional. I can assist you in exploring coping strategies, self-help techniques, or provide information, but I strongly encourage you to discuss your feelings with a qualified therapist or counselor when possible.</p><p>In the meantime, if there's anything specific you'd like to discuss or any questions you have, please don't hesitate to share, and I'll do my best to assist you.</p></span></div></div></div></div></div>
        <p>Jeff laughed. He laughed and laughed and laughed. His laughter was deep and as he continued it progressed to a deep, profound sadness. <em>An unfeeling automaton that never felt the pangs of isolation is going to tell me how to combat loneliness! My human contact problems solved by sand and steel! The future of healthcare indeed.</em></p>
        <p>Jeff closed the app and abruptly left the office. He just started walking and walking, his laughter progressing to crying progressing back to laughter again.</p>
        <p>After walking for what felt like an hour, Jeff ended up at a peaceful garden. He walked in and sat next to a small fountain. The scene was idyllic. The garden was a textbook image of serenity and he loved it. After some time, a robed figure approached him.</p>
        <p>Jeff weakly asked the monk &quot;Hello?&quot;</p>
        <p>The monk sat near him and replied &quot;Hello, it's a beautiful day out today, isn't it?&quot;</p>
        <p>The monk looked to be 40-50 years old. His hair had faded, and it looked like he had seen some things in life. The most distinctive feature was his calm yet gentle smile accented by his soothing voice.</p>
        <p>&quot;Yeah, I didn't know there was such a big park out here. How long has this place been here?&quot;</p>
        <p>&quot;The Zen Garden has existed for 100 years. We've worked to make it an immaculate respite from the world of temptation and separation. I've lived here for 20 years and it's still my favorite place in the world.&quot;</p>
        <p>The monk looked towards Jeff and continued, &quot;Is something troubling you?&quot;</p>
        <p>Jeff hesitated for a moment and cut loose with a torrent of his feelings, thoughts, and fears. He began to cry happily as he let it all out. <em>Finally! Human connection!</em></p>
        <p>The monk sat next to him and offered a shoulder to cry on. Once Jeff had let everything out, he asked the monk &quot;By the way, I'm Jeff. What's your name?&quot;</p>
        <p>The kind face of the monk appeared to melt away and get replaced with cold steel and glowing purple eyes.</p>
        <div class="w-full space-y-4 p-4"><div class="mx-auto w-full space-y-4"><div class="flex justify-end"><div class="flex w-11/12 flex-row-reverse"><div class="relative max-w-xl rounded-xl rounded-tr-none bg-purple-800 px-4 py-2"><span class="font-medium text-slate-50"><p>Hi, I am a large language model created by Sine. My job is to help you work
        with your problems so that you can find some inner peace. How have you been
        doing today Jeff?</p></span></div></div></div></div></div>
        <p>Jeff screamed.</p>
        <p>Suddenly Jeff found himself laying down on a park bench in San Francisco. There was a scruffy man standing over him looking worried. &quot;Y'all good?&quot;</p>
        <p>Jeff got up and confusedly surveyed the scene. It was the same park he always walked to before work, but it was not the morning. Jeff was late!</p>
        <p>Jeff got up and walked into the open office at the Techaro campus. Walking to his desk he saw a slack message in the technology news channel. People were really excited about it. A new ZCombinator startup raised 1 billion dollars in a Series A round to offer an alternative to expensive therapists using large language models.</p>
        <p>Its name was Sine.</p>
        <p>Jeff fainted.</p>]]>
      </content:encoded>
      <pubDate>Sat, 30 Sep 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>gokrazy is really cool</title>
      <link>https://xeiaso.net/blog/gokrazy/</link>
      <guid isPermaLink="false">https://xeiaso.net/blog/gokrazy/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<span class="text-3xl mt-4">I worked for Tailscale at the time of writing this article. I wrote this on my own time out of my own volition.</span>
        <p>When you deal with Linux, you end up hearing about &quot;distributions&quot; as different &quot;flavors&quot; of Linux combined with a bunch of other tools. This is mostly true, but it's slightly missing the forest for the trees.</p>
        <p>Consider this famous and often misunderstood quote by Richard Stallman:</p>
        <blockquote>
        <p>I'd just like to interject for a moment. What you're referring to as Linux is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux.Linux is not an operating system unto itself, but rather another free component of a fully functioning GNU system made useful by the GNU corelibs, shell utilities and vital system components comprising a full OS as defined by POSIX.</p>
        </blockquote>
        <p>Many pages of ink have been spilled over analyzing this quote, and a lot of them fall short of really getting at the heart of the matter. What this actually means is something like this:</p>
        <p>By itself, Linux is useless. It does boot the system, it does interface with hardware, but without a bunch of other tools, it's not very useful. It's like a car without a steering wheel, or a boat without a rudder. It does something, but it's not very useful. The real value of things like the GNU project, systemd, openrc and other tools in that vein is that they make Linux useful. They make it into a complete system that you can use to do things. They are the proverbial steering wheel and rudder in the metaphor.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> Fun fact, if you try to boot a Linux kernel without an init process, it'll just panic and crash!</div></div>
        <p>Most Linux systems on the face of the planet are built with GNU tools and utilities. In order to compile the Linux kernel, you need to use <a href="https://gcc.gnu.org/">GCC</a>. In order to run <code>ls</code> to list files in the current directory, you need to use <a href="https://www.gnu.org/software/coreutils/coreutils.html">GNU coreutils</a>. Every dynamically linked program uses <a href="https://www.gnu.org/software/libc/">glibc</a> for performing basic system interactions like writing to files or opening network sockets. Everything is built on top of the GNU toolset. This is why Stallman is so adamant about calling it GNU/Linux. It's not that he's trying to take credit for Linux, it's that he's trying to give credit to the GNU project for making Linux useful.</p>
        <p>However, there's a lot of room for nuance here. For example, <a href="https://alpinelinux.org/">Alpine Linux</a> is a Linux distribution that uses <a href="https://musl.libc.org/">musl libc</a> instead of <a href="https://www.gnu.org/software/libc/">glibc</a> and <a href="https://en.wikipedia.org/wiki/BusyBox">busybox</a> instead of GNU coreutils. It's still a Linux distribution, but it doesn't use the GNU toolset. It's still a Linux distribution, but it's not GNU/Linux.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> Also, for the record you can build the Linux kernel with clang, but that's a whole other can of worms. For one, GCC supports many more targets than clang likely ever will, but in general there are some compromises you need to make until clang implements some GCC-specific compiler extensions a bit better. Google, Facebook, and a few other companies do run LLVM compiled kernels in production though, so it's probably closer to viable than you think. Especially if you use ChromeOS or Android.</div></div>
        <p>So, what is a Linux distribution? It's a collection of tools that make Linux useful. It's a collection of tools that make Linux into a complete system. It's not a &quot;flavor&quot; of Linux (though this conceptually can exist with alternative kernels like the Zen kernel patchset), it's a system that just so happens to make Linux useful.</p>
        <p>As a counter-argument, consider the reason why Linux runs on more devices worldwide than there are people: <a href="https://en.wikipedia.org/wiki/Android_(operating_system)">Android</a>. Android does use the Linux kernel, but it doesn't use any GNU tools in the stack at all. You can't take programs that are compiled against other Linux distributions and run them on Android. You can't take programs that are compiled against Android and run them on other Linux distributions.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> Wait, so does this mean Android's not a Linux distribution? What is it then?</div></div>
        <p>I'm going to argue that Android is not a Linux distribution unto itself. Android is a Linux <em>implementation</em>. It uses the Linux kernel, but that's where the similarities with the rest of the ecosystem end. Android is its own little world where there's just enough system tools to get the system running, but once you get into the UI, it's a completely different world. It's a completely different ecosystem. It's a completely different operating system.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> So what's the difference between a Linux distribution and a Linux implementation?</div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is enby" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/enby/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> It's a bit of a fuzzy line, but I'd say that a Linux distribution is a collection of discrete tools that make Linux useful, and a Linux implementation is a cohesive collection of bespoke tools that make Linux into a complete system. Really, you could argue that if it has <code>/bin/sh</code>, it's a Linux distribution.</div></div>
        <h2>gokrazy</h2>
        <p><a href="https://gokrazy.org/">gokrazy</a> is a Linux implementation that I've used off and on for a few years now. It's a very interesting project because everything on the system is written in Go save the kernel. The init process is in Go (and even listens over HTTP to handle updates!), every userland process is written in Go, and even the core system services are written in Go.</p>
        <p>Out of the box a gokrazy install comes with these basic tools:</p>
        <ul>
        <li>The <code>init</code> process that is mandated to be the parent of all userland processes by the Linux kernel.</li>
        <li>A <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol">DHCP</a> client that automatically configures the network interface.</li>
        <li>A <a href="https://en.wikipedia.org/wiki/Network_Time_Protocol">NTP</a> client that automatically sets the system clock.</li>
        <li>A little tool to save randomness from the kernel to a file so that it can be used to seed the random number generator on boot (because the Raspberry Pi doesn't have a robust hardware random number generator)</li>
        </ul>
        <p>That's it. Everything else from the web UI to A/B update logic is written in Go. It boots in literal seconds, uses an insanely small amount of RAM out of the box, and runs with nearly zero overhead. When you configure your gokrazy install to run additional software, you do so by adding the Go command path to a configuration file and then updating to trigger a reboot into the new version.</p>
        <p>Here's an example of what my gokrazy virtual machine's file tree looks like:</p>
        <pre><code class="code-highlight"><span class="code-line">/ # tree etc gokrazy user
        </span><span class="code-line">etc
        </span><span class="code-line">├── breakglass.authorized_keys
        </span><span class="code-line">├── gokr-pw.txt
        </span><span class="code-line">├── gokrazy
        </span><span class="code-line">│   └── sbom.json
        </span><span class="code-line">├── hostname
        </span><span class="code-line">├── hosts
        </span><span class="code-line">├── http-port.txt
        </span><span class="code-line">├── https-port.txt
        </span><span class="code-line">├── localtime
        </span><span class="code-line">├── machine-id
        </span><span class="code-line">├── resolv.conf -> /tmp/resolv.conf
        </span><span class="code-line">└── ssl
        </span><span class="code-line">    └── ca-bundle.pem
        </span><span class="code-line">
        </span><span class="code-line">gokrazy
        </span><span class="code-line">├── dhcp
        </span><span class="code-line">├── heartbeat
        </span><span class="code-line">├── init
        </span><span class="code-line">├── ntp
        </span><span class="code-line">└── randomd
        </span><span class="code-line">
        </span><span class="code-line">user
        </span><span class="code-line">├── breakglass
        </span><span class="code-line">├── fbstatus
        </span><span class="code-line">├── qemu-guest-kragent
        </span><span class="code-line">├── serial-busybox
        </span><span class="code-line">├── tailscale
        </span><span class="code-line">├── tailscaled
        </span><span class="code-line">└── waifud-gok-agent
        </span></code></pre>
        <p>That is the <em>entire</em> system. It's all stripped down to these few programs, configuration files, and one symlink for DNS resolution. This is a very minimal system, and it's all you need to run statically linked Go programs. It's very easy to deploy your own services to it too. It's probably the easiest platform I know of that lets you just deploy a Go binary and have it run as a service, automatically restarting when it crashes.</p>
        <h2>The tooling</h2>
        <p>When I used gokrazy back in the day, you had to use a command line called <code>gokr-packer</code> that you passed a bunch of command line flags to with information about all the Go programs you wanted to run on the machine, configuration for those programs, and any other meta-information like where the update tool should push the image to. It was a bit of a pain to use, but it worked. Recently the <a href="https://gokrazy.org/quickstart/"><code>gok</code></a> tool was added to the project, and this has been <em>revolutionary</em> when it comes to using and administrating gokrazy installs.</p>
        <p>Essentially, <code>gok</code> is a wrapper around the existing <code>gokr-packer</code> logic with a JSON file to store your configuration details. It's a lot easier to use, understand, and automate. You don't have to remember command line flags or maintain unwieldy scripts. You just edit a JSON file and push updates with <code>gok update</code>. It's amazingly simple.</p>
        <h2>Setting up a gokrazy machine</h2>
        <p>As an example, I'm going to show you how to install a bunch of tailnet addons to a gokrazy machine. I'm also going to assume that you don't have a gokrazy install set up yet, so we'll need to install it. To do this, we'll need to do a few simple things:</p>
        <ul>
        <li>Install the <code>gok</code> tool.</li>
        <li>Create your <code>gok</code> configuration.</li>
        <li>Install Tailscale on the machine.</li>
        <li>Create your &quot;seed&quot; image with <code>gok overwrite</code>.</li>
        <li>Boot it on your Raspberry Pi or VM.</li>
        <li>Push any updates to the image to the machine with <code>gok update</code>.</li>
        </ul>
        <p>First, let's install the <code>gok</code> tool. In order to do this, you need to have the <a href="https://golang.org/doc/install">Go toolchain</a> installed. Once you have that, you can run <code>go install</code> to install the <code>gok</code> tool:</p>
        <pre><code class="code-highlight"><span class="code-line">go install github.com/gokrazy/tools/cmd/gok@main
        </span></code></pre>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> You may want to ensure that <code>~/go/bin</code> is in your <code>$PATH</code> variable so that you can run it by the name <code>gok</code> instead of <code>~/go/bin/gok</code>.</div></div>
        <p>Next, create a new gokrazy configuration with <code>gok new</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok new -i casa
        </span></code></pre>
        <p>This will create a configuration named <code>casa</code> (cf: Spanish for &quot;house&quot;) in <code>~/gokrazy/casa</code>. This is where all of your configuration files will live. You can edit the configuration file with <code>gok edit</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok edit -i casa
        </span></code></pre>
        <details><summary>If you are making a virtual machine</summary><p>If you are making a virtual machine, you will need to override the kernel and firmware packages. You can do this by adding the following to your configuration file:</p><pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">  <span class="token comment">// ...</span>
        </span><span class="code-line">  <span class="token property">&quot;KernelPackage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;github.com/rtr7/kernel&quot;</span><span class="token punctuation">,</span>
        </span><span class="code-line">  <span class="token property">&quot;FirmwarePackage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;github.com/rtr7/kernel&quot;</span><span class="token punctuation">,</span>
        </span><span class="code-line">  <span class="token comment">// ...</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre><p>You will need to prefix the <code>gok overwrite</code> and <code>gok update</code> commands with <code>GOARCH=amd64</code> to ensure that Go builds x86_64 binaries instead of ARM binaries:</p><pre><code class="code-highlight"><span class="code-line">GOARCH=amd64 gok update -i casa
        </span></code></pre><p>If you don't do this, you will get arm64 binaries being built. This may require manual recovery of your virtual machine.</p></details>
        <p>Let's make our lives easier by installing <a href="https://tailscale.com/">Tailscale</a> on the machine. By default, gokrazy will announce its hostname over DHCP, which usually makes most consumer routers pick it up and then lets you ping it by name. When you have <a href="https://tailscale.com/kb/1081/magicdns/">MagicDNS</a> enabled, Tailscale can take over this logic and prevent you from accessing the machine by name.</p>
        <p>However, Tailscale is written in Go and doesn't require any of the services that most Linux distributions provide in order to function. It's a perfect fit for gokrazy. You can install it with <code>gok add</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok add tailscale.com/cmd/tailscaled
        </span><span class="code-line">gok add tailscale.com/cmd/tailscale
        </span></code></pre>
        <p>And be sure to add the <code>mkfs</code> service to create a persistent partition on <code>/perm</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok add github.com/gokrazy/mkfs
        </span></code></pre>
        <p>Next, fetch an <a href="https://tailscale.com/kb/1085/auth-keys/">auth key</a> from <a href="https://login.tailscale.com/admin/settings/keys">the admin console</a> and make sure you check that it's reusable. Then, add the following to your configuration file under the <code>PackageConfig</code> block:</p>
        <pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">    <span class="token comment">// ...</span>
        </span><span class="code-line">    <span class="token property">&quot;PackageConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">        <span class="token comment">// ...</span>
        </span><span class="code-line">        <span class="token property">&quot;tailscale.com/cmd/tailscale&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">            <span class="token property">&quot;CommandLineFlags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        </span><span class="code-line">                <span class="token string">&quot;up&quot;</span><span class="token punctuation">,</span>
        </span><span class="code-line">                 <span class="token comment">// paste your key here!</span>
        </span><span class="code-line">                <span class="token string">&quot;--authkey=tskey-auth-hunter2-hunter2hunter2hunter2&quot;</span>
        </span><span class="code-line">            <span class="token punctuation">]</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">        <span class="token comment">// ...</span>
        </span><span class="code-line">    <span class="token punctuation">}</span>
        </span><span class="code-line">    <span class="token comment">// ...</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> You can pass any other <a href="https://tailscale.com/kb/1080/cli/#up"><code>tailscale up</code> flags</a> you want here, such as <code>--advertise-exit-node</code> if you want to use your gokrazy machine as an <a href="https://tailscale.com/kb/1103/exit-nodes/?q=exit%20node">exit node</a>.</div></div>
        <p>This will make your machine automatically connect to Tailscale on boot.</p>
        <p>Next, we need to create our &quot;seed&quot; image with <code>gok overwrite</code>. First, figure out what the device node for your SD card is. On Linux, you can do this with <code>lsblk</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">lsblk
        </span></code></pre>
        <p>And then look for the one that has the same size as your SD card. In my case, it's <code>/dev/sdd</code>. Once you have that, you can run <code>gok overwrite</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok overwrite --full /dev/sdd
        </span></code></pre>
        <p>However if you want to write the image to a file (such as if you are doing mass distribution or making a VM image), you need to use <code>gok overwrite</code> with a file instead of a device node. This will create a 16 GB image:</p>
        <pre><code class="code-highlight"><span class="code-line">gok overwrite -i casa --full gokrazy.img --target_storage_bytes 17179869184
        </span></code></pre>
        <p>Once you have your image, you can write it to your SD card with <code>dd</code> (or <a href="https://etcher.balena.io/">balenaEtcher</a>) or import it into your virtual machine hypervisor of choice.</p>
        <p>Once you have your image written to your SD card, you can boot it on your Raspberry Pi or VM.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> Wait, so how do I log in with a shell?</div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is enby" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/enby/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> You don't. gokrazy doesn't have a login prompt. It's a single-user system. There is <a href="https://github.com/gokrazy/breakglass"><code>breakglass</code></a> as a tool of last resort to modify things, but you only have a very minimal subset of busybox to work with, so it should be avoided if at all possible.</div></div>
        <p>Once you have your machine booted and it responds to pings over Tailscale, you can open its HTTP interface in your browser. If you called your machine <code>casa</code>, you can open it at <a href="http://casa/"><code>http://casa</code></a>. It will prompt you for a username and password. Your username is <code>gokrazy</code>, and the password is near the top of your <code>config.json</code> file. When you log in, you'll see a screen like this:</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/gokrazy-ui.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/gokrazy-ui.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/gokrazy-ui.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/gokrazy-ui.jpg"/></picture></a></figure>
        <p>This is the gokrazy web UI. It lets you see the status of your machine and any logs that are being generated by your applications. You can also start, stop, and restart any of your applications from here. It's a very simple UI, but it's fantastic for debugging and monitoring.</p>
        <h2>Tailnet addons</h2>
        <p>Now that we have a Gokrazy system up and running, let's add some programs to it! I'm going to list a couple tailnet addons that give your tailnet superpowers. These are all written in Go, so they're a perfect fit for gokrazy.</p>
        <p>Today I'm going to show you how to install these tools into your tailnet:</p>
        <ul>
        <li><a href="https://github.com/tailscale/golink">golink</a> - a URL shortener at <code>http://go</code></li>
        <li><a href="https://github.com/tailscale/tmemes">tmemes</a> - an internal meme generator you can host at <code>http://memegen</code></li>
        <li><a href="https://github.com/tailscale-dev/tclip">tclip</a> - a pastebin you can host at <code>http://paste</code></li>
        </ul>
        <p>These tools help you augment your tailnet by giving you tools that will make you and your team's life a lot easier. A URL shortener helps you link to complicated Google Docs URLs. A meme generator gives you a new innovative way to let off steam. A pastebin lets you share text with your team without having to worry about the service you're using going offline due to no fault of your own.</p>
        <h3>golink</h3>
        <p>To install golink, we need to add the <code>golink</code> binary to the configuration. You can do this with <code>gok add</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok add github.com/tailscale/golink/cmd/golink
        </span></code></pre>
        <p>Then configure it with <code>gok edit</code>:</p>
        <pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">    <span class="token comment">// ...</span>
        </span><span class="code-line">    <span class="token property">&quot;PackageConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">        <span class="token comment">// ...</span>
        </span><span class="code-line">        <span class="token property">&quot;github.com/tailscale/golink/cmd/golink&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">            <span class="token property">&quot;CommandLineFlags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        </span><span class="code-line">                <span class="token string">&quot;--sqlitedb=/perm/home/golink/data.db&quot;</span>
        </span><span class="code-line">            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">            <span class="token property">&quot;Environment&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        </span><span class="code-line">                <span class="token comment">// the same one from before</span>
        </span><span class="code-line">                <span class="token string">&quot;TS_AUTHKEY=tskey-auth-hunter2-hunter2hunter2hunter2&quot;</span>
        </span><span class="code-line">            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">            <span class="token comment">// don't start the service until NTP catches up</span>
        </span><span class="code-line">            <span class="token property">&quot;WaitForClock&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">        <span class="token comment">// ...</span>
        </span><span class="code-line">    <span class="token punctuation">}</span>
        </span><span class="code-line">    <span class="token comment">// ...</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>And finally push it with <code>gok update</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok update -i casa
        </span></code></pre>
        <p>It'll build the image, push it out over Tailscale, trigger a reboot, and be back up in the span of a minute. Once it's back up, you can open the web UI again and see the status of your <code>golink</code> instance at <a href="http://casa/status?path=%2fuser%2fgolink">http://casa/status?path=%2fuser%2fgolink</a>:</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/golink.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/golink.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/golink.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/golink.jpg"/></picture></a></figure>
        <p>And then you can start using short URLs at <a href="http://go/">http://go</a>:</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/golink-ui.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/golink-ui.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/golink-ui.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/golink-ui.jpg"/></picture></a></figure>
        <p>And that's it! You now have a super minimal VM running small programs that let you do useful things to you. You can add more programs to your configuration file and push them with <code>gok update</code> to add more functionality to your machine. You can even add your own programs to the configuration file and push them to your machine. It's a very simple system, but it's very powerful.</p>
        <h3>tmemes</h3>
        <p>Google is infamous for having an internal service named <a href="https://www.buzzfeednews.com/article/reyhan/inside-googles-internal-meme-generator">memegen</a>. This allows Googlers to make internal-facing memes about the slings and arrows that impact them as highly paid programmers. This is an internal service inside Google that has a lot of serious investment of time and energy to make it the best possible experience it can be. It's to the point that reportedly people can keep up with how an all-hands meeting is going by the tone of the sarcastic memes that are being posted to memegen.</p>
        <p>The main reason this is run inside Google is to avoid information leaking via memes. Yes, this is an actual threat model.</p>
        <p>Thanks to the magic of Tailscale, you can make your own private memegen using <a href="https://github.com/tailscale/tmemes">tmemes</a>. tmemes is a tailnet addon that lets you post image macro templates and layer wisdom over it in the form of text.</p>
        <p>Here's an example meme:</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/society-if-gokrazy.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/society-if-gokrazy.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/society-if-gokrazy.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/blog/2023/gokrazy/society-if-gokrazy.jpg"/></picture></a></figure>
        <p>To add tmemes to your gokrazy machine, you can use <code>gok add</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok add github.com/tailscale/tmemes/tmemes
        </span></code></pre>
        <p>Then open your config with <code>gok edit</code> and add the following to your <code>PackageConfig</code> block:</p>
        <pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">    <span class="token comment">// ...</span>
        </span><span class="code-line">    <span class="token property">&quot;PackageConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">        <span class="token comment">// ...</span>
        </span><span class="code-line">        <span class="token property">&quot;github.com/tailscale/tmemes/tmemes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">            <span class="token property">&quot;Environment&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        </span><span class="code-line">                <span class="token string">&quot;TS_AUTHKEY=tskey-auth-hunter2-hunter2hunter2hunter2&quot;</span>
        </span><span class="code-line">            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">            <span class="token property">&quot;CommandLineFlags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        </span><span class="code-line">                <span class="token comment">// change this to your desired hostname</span>
        </span><span class="code-line">                <span class="token string">&quot;--hostname=memegen&quot;</span><span class="token punctuation">,</span>
        </span><span class="code-line">                <span class="token comment">// change this to your username on Tailscale</span>
        </span><span class="code-line">                <span class="token string">&quot;--admin=Xe@github&quot;</span><span class="token punctuation">,</span>
        </span><span class="code-line">                <span class="token string">&quot;--store=/perm/home/tmemes&quot;</span>
        </span><span class="code-line">            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">            <span class="token property">&quot;WaitForClock&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">        <span class="token comment">// ...</span>
        </span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">    <span class="token comment">// ...</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>And then push it with <code>gok update</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok update -i casa
        </span></code></pre>
        <p>Then you can head to <a href="http://memegen/">http://memegen</a> and upload a template to make your own dank memes.</p>
        <p>If you want to integrate your own tools with tmemes, you can check out the <a href="https://github.com/tailscale/tmemes/blob/main/docs/api.md">API documentation</a>. This should help you do whatever it is you want with a meme generator as a service.</p>
        <h3>tclip</h3>
        <p>Sometimes you just need a place to paste text and get a URL pointing to it. <a href="https://tailscale.dev/blog/tclip">tclip</a> is a tool that you can add to your tailnet and get exactly that. It's a very simple tool, but it's very useful. It's also written in Go, so it's a perfect fit for gokrazy. <a href="https://tailscale.dev/blog/tclip-updates-092023">Their recent update to remove Cgo dependencies</a> makes it possible to run your tclip node on a gokrazy machine.</p>
        <p>To add tclip to your gokrazy machine, you can use <code>gok add</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok add github.com/tailscale-dev/tclip/cmd/tclipd
        </span></code></pre>
        <p>Then open your config with <code>gok edit</code> and add the following to your <code>PackageConfig</code> block:</p>
        <pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">    <span class="token comment">// ...</span>
        </span><span class="code-line">    <span class="token property">&quot;PackageConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">        <span class="token comment">// ...</span>
        </span><span class="code-line">        <span class="token property">&quot;github.com/tailscale-dev/tclip/cmd/tclipd&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">            <span class="token property">&quot;CommandLineFlags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        </span><span class="code-line">                <span class="token string">&quot;--data-location=/perm/home/tclip/&quot;</span>
        </span><span class="code-line">            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">            <span class="token property">&quot;WaitForClock&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        </span><span class="code-line">            <span class="token property">&quot;Environment&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        </span><span class="code-line">                <span class="token string">&quot;TS_AUTHKEY=tskey-auth-hunter2-hunter2hunter2hunter2&quot;</span><span class="token punctuation">,</span>
        </span><span class="code-line">                <span class="token string">&quot;USE_FUNNEL=true&quot;</span> <span class="token comment">// Remove this if you don't want to use Funnel</span>
        </span><span class="code-line">            <span class="token punctuation">]</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">        <span class="token comment">// ...</span>
        </span><span class="code-line">    <span class="token punctuation">}</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>And then push it with <code>gok update</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">gok update -i casa
        </span></code></pre>
        <p>And then you can start using it by heading to <a href="http://paste/">http://paste</a>. Install the command-line tool on your development workstation with <code>go install</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">go install github.com/tailscale-dev/tclip/cmd/tclip@latest
        </span></code></pre>
        <p>Here's an example tclip link if you want to see what it looks like in practice: <a href="https://paste.shark-harmonic.ts.net/paste/696b9b02-90ac-4adc-a33d-d749bb6f460f">interjection.c</a>. It's a very simple tool, but it's very useful.</p>
        <h2>Conclusion</h2>
        <p>gokrazy is insanely cool. It's the <em>easiest</em> way to deploy Go services to your homelab. It integrates seamlessly with Tailscale, and is something that I'm very excited to see grow and mature. I'm very excited to see what the future holds for gokrazy, and I'm very excited to see what people do with it.</p>
        <p>I've seen signs that they're going to be adding an automatic update process, and that has me <em>very</em> excited. I'm also excited to see what other services people add to the gokrazy ecosystem. I'm hoping to add a few of my own in the future, and I'm hoping to see what other people do with it.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> Spoiler alert: <a href="https://github.com/Xe/waifud-gok-agent">waifud support</a> is coming soon to a homelab near you.</div></div>]]>
      </content:encoded>
      <pubDate>Wed, 20 Sep 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Making NixOS modules for fun and (hopefully) profit</title>
      <link>https://xeiaso.net/talks/asg-2023-nixos/</link>
      <guid isPermaLink="false">https://xeiaso.net/talks/asg-2023-nixos/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> There was an A/V glitch with the recording, my slides were intended to be black and white, but they somehow came out as purple and green. This couldn't be fixed even when trying several HDMI cables. If this becomes an issue I may re-record this talk in my home studio.</div></div>
        <video id="f6aa93dc-e518-4ad8-8d38-3ee3d528add7" class="not-prose" style="width:100%" controls><source src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/video/proper/index.m3u8" type="application/vnd.apple.mpegurl"/><source src="https://cdn.xeiaso.net/file/christine-static/blog/HLSBROKE.mp4" type="video/mp4"/></video><script type="module">import execFor from '/js/hls.js';
        
        execFor('f6aa93dc-e518-4ad8-8d38-3ee3d528add7', 'https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/video/proper/index.m3u8');</script>
        <ul>
        <li><a href="https://media.ccc.de/v/all-systems-go-2023-214-writing-your-own-nixos-modules-for-fun-and-hopefully-profit">Link to the video on the CCC
        website</a></li>
        <li><a href="https://youtu.be/SzyuLVzS5Fg">YouTube link</a></li>
        </ul>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/001.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/001.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/001.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/001.jpg"/></picture></a></figure>
        <p>Good morning everyone! Say this happens to you: you've been coding nonstop on something you want to share with your friends and it works on your MacBook. You want it to stay up when your MacBook goes to sleep or you get on a plane or something, and all you have to do is the easy task of putting it into production. It's just simple, right?</p>
        <p>Just add a Dockerfile, they say! So you do that and then you have a Docker image that you can push to your target machine and then you find out that you can't just push it from machine to machine, you have to push it to a registry.</p>
        <p>So you make an account on the Docker hub only to find out that their rate limits are very aggressive so you have to move to something like GHCR and aggressively cache all your images there so you don't run afoul of the comically small Docker Hub rate limits which will block your attempts to deploy it to your cloud provider of choice.</p>
        <p>So you do that and you pull this on a VM running on someone else's computer, and then you need to figure out the other fun part:</p>
        <p>You need to configure nginx. Of course it uses its own bespoke configuration language that no other program on the planet uses (this is an unfortunately common pattern in our industry) so it's even more googling for that. But then you realize you need to configure the real final boss of the internet:</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/006.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/006.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/006.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/006.jpg"/></picture></a></figure>
        <p>DNS. It's never DNS until it's always DNS. So you install the artist formerly known as Terraform, lego, and provision your DNS and HTTPS certificates (because of course nginx doesn't just natively have this support in anno dominium two thousand and twenty three like any sensible HTTP reverse proxy should). And then you're finally done. It's taken you an hour to hack up the service and a whole 8 hours to research and implement everything to deploy it. This is <em>madness</em>. Why do we have to put up with this?</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/007.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/007.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/007.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/007.jpg"/></picture></a></figure>
        <p>The koolaid runs deep in the cloud too, if you're not careful you'll end up accidentally making an entire event sourcing platform with an unrealistic amount of complexity to manage something as simple as a tamagochi. You're just trying to make an HTTP service show up on the internet, you don't need to know what an ALB, EKS, ECS, IAM, or PFA is.</p>
        <p>Of course, complain about this online and a certain tangerine community funded by big YAML will decry that you should use Kubernetes to simplify all this down to &quot;simple&quot; and &quot;easy to understand&quot; things, conveniently ignoring that they use a <em>string templating language</em> for <em>structured data</em>.</p>
        <p>There has <em>got</em> to be something simpler, right? What if you didn't have to deal with nearly any of that? What if you could just push and run your binary on a <em>home server</em> and then access it? No dealing with the cloud. No dealing with security groups or IAM or DNS or HTTPS or any of the slings and arrows of outrageous investment. What if you could just describe the state of the system you want instead of going three layers deep into a side of devops hell that you will never return from unscathed?</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/010.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/010.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/010.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/010.jpg"/></picture></a></figure>
        <p>This is the real value of NixOS. Today I'm going to show you how to turn an arbitrary Go program into a NixOS service and then I'll expose it to the world thanks to Tailscale Funnel. This means you can link it to your group chat of friends and restore balance to the force. Or whatever it is you zoomers do in group chats.</p>
        <p>All that said, let me introduce myself. I'm Xe Iaso, I write that one blog that you keep finding when you google Nix and NixOS stuff. I'm a writer, gamer, philosopher of chaos magick, and have a critical blogging addiction.</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/012.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/012.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/012.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/012.jpg"/></picture></a></figure>
        <p>Today I'm going to cover a few core things so you can make your own NixOS modules: I'm going to cover what a NixOS module is and why you should care, the parts of one, how to make your own, and then I'm going to tempt the demo gods by doing a live deployment to a virtual machine on my MacBook.</p>
        <p>Before I get started though, let's get some exercise in. Raise your hand if this is your first exposure to Nix and/or NixOS.</p>
        <p>(About half the room raises their hands)</p>
        <p>Alright, thanks.</p>
        <p>Raise your hand if you've ever used it before.</p>
        <p>(The other half of the room raises their hands)</p>
        <p>That's about what I expected.</p>
        <p>How about if you have it installed on a server at home?</p>
        <p>(The same people raise their hands)</p>
        <p>Okay, okay, I see.</p>
        <p>How about if you're one of the lucky few where your employer uses it in production?</p>
        <p>(Only a few of those people raise their hands)</p>
        <p>Oh, wow, okay. That makes sense. You can lower your hands now.</p>
        <p>Just so we're on the same page, Nix is a package manager that lets you declare all of the inputs for a program and get the same output from the build process.</p>
        <pre class="language-go"><code class="language-go code-highlight"><span class="code-line"><span class="token keyword">func</span> <span class="token function">Build</span><span class="token punctuation">(</span>
        </span><span class="code-line">  inputs <span class="token punctuation">[</span><span class="token punctuation">]</span>Package<span class="token punctuation">,</span>
        </span><span class="code-line">  steps BuildInfo<span class="token punctuation">,</span>
        </span><span class="code-line"><span class="token punctuation">)</span> <span class="token punctuation">(</span>
        </span><span class="code-line">  output Package<span class="token punctuation">,</span>
        </span><span class="code-line">  err Error<span class="token punctuation">,</span>
        </span><span class="code-line"><span class="token punctuation">)</span>
        </span></code></pre>
        <p>One of the main ways that Nix stands out from the crowd is the idea that package builds are functions. They effectively take in inputs, use them against some instructions, and then either return a package or the build fails due to an error. Because there were no other options at the time, Nix uses its own programming language also named Nix to define packages.</p>
        <p>Remember, Nix was the result of lamentations at the state of software and this was the result.</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/019.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/019.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/019.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/019.jpg"/></picture></a></figure>
        <p>To help you understand, I've put up this helpful diagram. It uses rainbow comic sans so you know it's legit. Nixpkgs the standard library uses Nix the language, but it is not NixOS the operating system. I like to think about NixOS like this:</p>
        <p>NixOS is the natural consequence of using Nix to build Linux systems. You can think about NixOS as a bunch of prebaked snippets of configuration that you can combine info a running system that does what you want. Each of those snippets is called a module. Nixpkgs (the standard library in Nix land) ships with a bunch of them that do things from compiling systemd to configuring Tailscale for you. Here's a simple NixOS module from my homelab:</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line"><span class="token punctuation">{</span> config<span class="token punctuation">,</span> pkgs<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">  services<span class="token punctuation">.</span>prometheus<span class="token punctuation">.</span>exporters<span class="token punctuation">.</span>node<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>A NixOS module is a function that takes the current state of the world and returns things to change in it. The module I'm showing here is from my homelab, specifically the part that enables the prometheus node exporter so that I can report when machines suddenly go offline or their hard drives are going bad. This is a very simple example. When you import it, it always takes effect. There's no flags to enable it or disable it. This is fine for my usecase however, because I want my homelab cluster to always be monitored. Things get a lot more fun when you add options into the mix:</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line"><span class="token punctuation">{</span> lib<span class="token punctuation">,</span> config<span class="token punctuation">,</span> pkgs<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token keyword">with</span> lib<span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token keyword">let</span> cfg <span class="token operator">=</span> config<span class="token punctuation">.</span>within<span class="token punctuation">.</span>vim<span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token keyword">in</span> <span class="token punctuation">{</span>
        </span><span class="code-line">  options<span class="token punctuation">.</span>within<span class="token punctuation">.</span>vim<span class="token punctuation">.</span>enable <span class="token operator">=</span> mkEnableOption <span class="token string">&quot;Enables Within's vim config&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">  config <span class="token operator">=</span> mkIf cfg<span class="token punctuation">.</span>enable <span class="token punctuation">{</span>
        </span><span class="code-line">    home<span class="token punctuation">.</span>packages <span class="token operator">=</span> <span class="token punctuation">[</span> pkgs<span class="token punctuation">.</span>vim <span class="token punctuation">]</span><span class="token punctuation">;</span>
        </span><span class="code-line">    home<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token string">&quot;.vimrc&quot;</span><span class="token punctuation">.</span>source <span class="token operator">=</span> <span class="token url">./vimrc</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>Compare it to this module, this is a dot file management module that sets up my vimrc on my machines. I have the option <code>within.vim.enable</code>, and if that is set to true, the vim configuration is dropped in place. If it's not set to true, it won't put the vim configuration in the system. NixOS modules have options and configuration outputs. Options let you customize the configuration to meet your spacebar heating needs.</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line"><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
        </span><span class="code-line">
        </span><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">    imports <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token url">./vim</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
        </span><span class="code-line">    within<span class="token punctuation">.</span>vim<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>To use this, you'd add the path to the file to an <code>imports</code> output of the module, then add a <code>within.vim.enable = true</code> statement inside your home-manager configuration.</p>
        <p>The state of the world is the input, and any new changes are the outputs. This lets you build a Linux system <em>exactly</em> the way you want to. It's just a new and interesting way to write a function.</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line">services<span class="token punctuation">.</span>nginx<span class="token punctuation">.</span>virtualHosts<span class="token punctuation">.</span><span class="token string">&quot;xeiaso.net&quot;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">  locations<span class="token punctuation">.</span><span class="token string">&quot;/&quot;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    proxyPass <span class="token operator">=</span> <span class="token string">&quot;http://unix:<span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span><span class="token function">toString</span> cfg<span class="token punctuation">.</span>sockPath<span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">    proxyWebsockets <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">  forceSSL <span class="token operator">=</span> cfg<span class="token punctuation">.</span>useACME<span class="token punctuation">;</span>
        </span><span class="code-line">  useACMEHost <span class="token operator">=</span> <span class="token string">&quot;xeiaso.net&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">  extraConfig <span class="token operator">=</span> <span class="token string">''
        </span></span><span class="code-line"><span class="token string">    access_log /var/log/nginx/xesite.access.log;
        </span></span><span class="code-line"><span class="token string">  ''</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span></code></pre>
        <p>Above all else: you can configure programs like nginx directly in your NixOS configuration without having to learn how to write nginx config, saving you from having to configure every single program on your system in its own bespoke ways.</p>
        <p>(Pause)</p>
        <xeblog-sticker name="Mara" mood="happy"></xeblog-sticker>
        <p>Of course, things become a lot more fun when you can build your own NixOS modules that have your own programs running on your own machines. Let's do that with an example program that shows quotes from the legendary British science fiction author Douglas Adams.</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/daquotes.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/daquotes.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/daquotes.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/daquotes.jpg"/></picture></a></figure>
        <p>This is what the end result will look like. It'll be the quotes on a screen that refreshes every time you press F5. This will let you spread the undeniable wisdom of the late and great Douglas Adams, author of the five part trilogy The Hitchhiker's Guide to the Galaxy.</p>
        <p><img src="https://xeiaso.net/static/img/asg2023-diagram.svg" alt="The diagram of the infrastructure setup"/></p>
        <p>So overall, the infrastructure setup will look like this: my MacBook and the VM are both connected to each other with Tailscale. When I enable Tailscale Funnel, the VM is going to have its HTTPS port opened up to the public internet so that you can visit this service running on a VM, on my MacBook, on conference Wi-Fi. Let's hope the demo gods are in our favour!</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/028.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/028.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/028.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/028.jpg"/></picture></a></figure>
        <p>By the way, Tailscale's gonna take care of the DNS and Let's Encrypt problems for us. No having to figure that out in the conference!</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">  description <span class="token operator">=</span> <span class="token string">&quot;Douglas Adams quotes&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">  <span class="token comment"># Nixpkgs / NixOS version to use.</span>
        </span><span class="code-line">  inputs<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;nixpkgs/nixos-unstable&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">  outputs <span class="token operator">=</span> <span class="token punctuation">{</span> self<span class="token punctuation">,</span> nixpkgs <span class="token punctuation">}</span><span class="token punctuation">:</span>
        </span><span class="code-line">  <span class="token keyword">let</span> <span class="token comment"># ...</span>
        </span><span class="code-line">  <span class="token keyword">in</span>
        </span><span class="code-line">  <span class="token punctuation">{</span>
        </span><span class="code-line">    packages <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        </span><span class="code-line">    nixosModules<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        </span><span class="code-line">    devShell <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        </span><span class="code-line">    checks<span class="token punctuation">.</span>x86_64<span class="token operator">-</span>linux <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>I've opened a VS Code session with an &quot;empty&quot; flake configuration. Nix flakes let you create a set of packages, development environments, NixOS modules, and even end to end integration tests. To start, this flake will import nixpkgs:</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line"><span class="token comment"># Nixpkgs / NixOS version to use.</span>
        </span><span class="code-line">inputs<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;nixpkgs/nixos-unstable&quot;</span><span class="token punctuation">;</span>
        </span></code></pre>
        <p>And then it declares a devShell for all of the developer dependencies:</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line">devShell <span class="token operator">=</span> forAllSystems <span class="token punctuation">(</span>system<span class="token punctuation">:</span>
        </span><span class="code-line">  <span class="token keyword">let</span> pkgs <span class="token operator">=</span> nixpkgsFor<span class="token punctuation">.</span><span class="token antiquotation important">$</span><span class="token punctuation">{</span>system<span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token keyword">in</span> <span class="token keyword">with</span> pkgs<span class="token punctuation">;</span>
        </span><span class="code-line">  mkShell <span class="token punctuation">{</span>
        </span><span class="code-line">    buildInputs <span class="token operator">=</span>
        </span><span class="code-line">      <span class="token punctuation">[</span> go_1_21 gotools go<span class="token operator">-</span>tools gopls nixpkgs<span class="token operator">-</span>fmt nodejs yarn <span class="token punctuation">]</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span></code></pre>
        <p>This is relevant because I want you to imagine a world where your compilers aren't in your shell by default. This devShell configuration adds the packages relevant to the project to the development environment. This is a Go project with some CSS managed by Tailwind, so it's got the Go compiler, some Go development tools, npm, and yarn. A pretty normal set of things really.</p>
        <p>To enter the development environment, run <code>nix develop</code>. I'm going to run <code>yarn start:css</code> in another shell to rebuild when any of the template files change.</p>
        <p>Now that we have that, let's see how we would add a package to the flake. One of the flake output kinds is Nix packages, so we make an output named packages and paste in some boilerplate to get a Go package working:</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line">packages <span class="token operator">=</span> forAllSystems <span class="token punctuation">(</span>system<span class="token punctuation">:</span>
        </span><span class="code-line">  <span class="token keyword">let</span>
        </span><span class="code-line">    pkgs <span class="token operator">=</span> nixpkgsFor<span class="token punctuation">.</span><span class="token antiquotation important">$</span><span class="token punctuation">{</span>system<span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token keyword">in</span>
        </span><span class="code-line">  <span class="token punctuation">{</span>
        </span><span class="code-line">    default <span class="token operator">=</span> pkgs<span class="token punctuation">.</span>buildGo121Module <span class="token punctuation">{</span>
        </span><span class="code-line">      pname <span class="token operator">=</span> <span class="token string">&quot;douglas-adams-quotes&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">      <span class="token keyword">inherit</span> version<span class="token punctuation">;</span>
        </span><span class="code-line">      src <span class="token operator">=</span> <span class="token url">./.</span><span class="token punctuation">;</span>
        </span><span class="code-line">      vendorSha256 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        </span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span></code></pre>
        <p>The package would look something like this. This forAllSystems / nixpkgsFor hack is something you can work around with flake-utils, but for right now I'm doing <em>everything</em> manually. This is basically a bunch of predefined copies of nixpkgs for all the supported architectures, much like there's a devshell for every supported architecture. Either way, we get a Go module built into a package, and we define the dependency hash as null because this is only using the standard library. It's called default in the flake because it's best practice to name your package that.</p>
        <p>Just to test it, you can run <code>nix build</code> to build the default package in that flake.nix file:</p>
        <pre><code class="code-highlight"><span class="code-line">nix build
        </span></code></pre>
        <p>Perfect! It builds! The binary is in ./result/bin/ and we can run it wherever we want.</p>
        <pre><code class="code-highlight"><span class="code-line">$ ./result/bin/douglas-adams-quotes --help
        </span><span class="code-line">Usage of ./result/bin/douglas-adams-quotes:
        </span><span class="code-line">  -addr string
        </span><span class="code-line">        listen address (default &quot;:8080&quot;)
        </span><span class="code-line">  -slog-level string
        </span><span class="code-line">        log level (default &quot;INFO&quot;)
        </span></code></pre>
        <p>If it didn't work we wouldn't get this far!</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line">nixosModules<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token punctuation">{</span> config<span class="token punctuation">,</span> lib<span class="token punctuation">,</span> pkgs<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
        </span><span class="code-line"><span class="token keyword">with</span> lib<span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token keyword">let</span>
        </span><span class="code-line">    cfg <span class="token operator">=</span> config<span class="token punctuation">.</span>xe<span class="token punctuation">.</span>services<span class="token punctuation">.</span>douglas<span class="token operator">-</span>adams<span class="token operator">-</span>quotes<span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token keyword">in</span>
        </span><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">    options<span class="token punctuation">.</span>xe<span class="token punctuation">.</span>services<span class="token punctuation">.</span>douglas<span class="token operator">-</span>adams<span class="token operator">-</span>quotes <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">        enable <span class="token operator">=</span> mkEnableOption <span class="token string">&quot;Enable the Douglas Adams quotes service&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">        logLevel <span class="token operator">=</span> mkOption <span class="token punctuation">{</span>
        </span><span class="code-line">            type <span class="token operator">=</span> <span class="token keyword">with</span> types<span class="token punctuation">;</span> enum <span class="token punctuation">[</span> <span class="token string">&quot;DEBUG&quot;</span> <span class="token string">&quot;INFO&quot;</span> <span class="token string">&quot;ERROR&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
        </span><span class="code-line">            example <span class="token operator">=</span> <span class="token string">&quot;DEBUG&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">            default <span class="token operator">=</span> <span class="token string">&quot;INFO&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">            description <span class="token operator">=</span> <span class="token string">&quot;log level for this application&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">        port <span class="token operator">=</span> mkOption <span class="token punctuation">{</span>
        </span><span class="code-line">            type <span class="token operator">=</span> types<span class="token punctuation">.</span>port<span class="token punctuation">;</span>
        </span><span class="code-line">            default <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>
        </span><span class="code-line">            description <span class="token operator">=</span> <span class="token string">&quot;port to listen on&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">        package <span class="token operator">=</span> mkOption <span class="token punctuation">{</span>
        </span><span class="code-line">            type <span class="token operator">=</span> types<span class="token punctuation">.</span>package<span class="token punctuation">;</span>
        </span><span class="code-line">            default <span class="token operator">=</span> self<span class="token punctuation">.</span>packages<span class="token punctuation">.</span><span class="token antiquotation important">$</span><span class="token punctuation">{</span>pkgs<span class="token punctuation">.</span>system<span class="token punctuation">}</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
        </span><span class="code-line">            description <span class="token operator">=</span> <span class="token string">&quot;package to use for this service (defaults to the one in the flake)&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">    config <span class="token operator">=</span> mkIf cfg<span class="token punctuation">.</span>enable <span class="token punctuation">{</span>
        </span><span class="code-line">        systemd<span class="token punctuation">.</span>services<span class="token punctuation">.</span>douglas<span class="token operator">-</span>adams<span class="token operator">-</span>quotes <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">            description <span class="token operator">=</span> <span class="token string">&quot;Douglas Adams quotes&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">            wantedBy <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;multi-user.target&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">            serviceConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">            DynamicUser <span class="token operator">=</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">            ExecStart <span class="token operator">=</span> <span class="token string">&quot;<span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>cfg<span class="token punctuation">.</span>package<span class="token punctuation">}</span></span>/bin/douglas-adams-quotes --slog-level=<span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span>cfg<span class="token punctuation">.</span>logLevel<span class="token punctuation">}</span></span> --addr=:<span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span><span class="token function">toString</span> cfg<span class="token punctuation">.</span>port<span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">            Restart <span class="token operator">=</span> <span class="token string">&quot;on-failure&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">            RestartSec <span class="token operator">=</span> <span class="token string">&quot;5s&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span></code></pre>
        <p>We defined the devShell to build the program development. We defined the  package to build the software, and now we'll define the module to tell NixOS how to run the software. This is a basic NixOS module. It's defined inline to the flake for now, moving it to its own file is an exercise for the reader.</p>
        <p>Like I said before, a NixOS module is a function that takes in the state of the world and returns new additions to the state of the world. This NixOS module provides some options under <code>xe.services.douglas-adams-quotes</code> and then if the module is enabled, it creates a new systemd service to run it in. We're in the future, so we can use fancy things like DynamicUser to avoid having to run this service as root.</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line">options<span class="token punctuation">.</span>xe<span class="token punctuation">.</span>services<span class="token punctuation">.</span>douglas<span class="token operator">-</span>adams<span class="token operator">-</span>quotes <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    enable <span class="token operator">=</span> mkEnableOption <span class="token string">&quot;Enable the Douglas Adams quotes service&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">    logLevel <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        </span><span class="code-line">    port <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        </span><span class="code-line">    package <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span></code></pre>
        <p>The real fun part comes when you define options for the service. Every one of these options correlates to CLI flags so you can change various options on the fly. It's good practice to map any non-secret configuration settings to options so that users can have easy escape hatches for changing things like the HTTP bind port or log level to get debug output. Secrets are a more complicated thing due to how Nix works, so we're not going to talk about those today.</p>
        <p>So we have everything we need now. We have development environment configuration, a package build, and finally a NixOS module to get the service running. The last step is to push it into prod. I have a NixOS virtual machine set up for this on my MacBook, but you may want to run this somewhere else, such as in Hyper-V on your gaming tower. Or maybe the cloud, I won't judge!</p>
        <p>Now we get to the fun part, enabling the NixOS module. I'm going to use the VS Code Tailscale extension to SSH in and open up the files in my VM, so lemme do that real quick.</p>
        <p>Let's peer into my VM's deployment flake and see what we can do to deploy it. This is a brand new, never opened VM, the only thing I did was set up a flake in /etc/nixos/flake.nix that imports the autogenerated configuration from the installer. This allows us to import things like the Douglas Adams Quotes service into the VM.</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">  inputs<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;github:NixOS/nixpkgs/nixos-unstable&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">  outputs <span class="token operator">=</span> <span class="token punctuation">{</span> self<span class="token punctuation">,</span> nixpkgs<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    nixosConfigurations<span class="token punctuation">.</span>douglas<span class="token operator">-</span>adams <span class="token operator">=</span> nixpkgs<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>nixosSystem <span class="token punctuation">{</span>
        </span><span class="code-line">      system <span class="token operator">=</span> <span class="token string">&quot;aarch64-linux&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">      modules <span class="token operator">=</span> <span class="token punctuation">[</span>
        </span><span class="code-line">        <span class="token url">./configuration.nix</span>
        </span><span class="code-line">      <span class="token punctuation">]</span><span class="token punctuation">;</span>
        </span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>Here's what the file looks like. I import nixos unstable, and then I create a nixos configuration for a machine named douglas-adams. This &quot;modules&quot; block has a list of NixOS module filenames or literal expressions. This lets you import NixOS modules from other flakes and define your own NixOS modules on the fly.</p>
        <pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">  inputs<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;github:NixOS/nixpkgs/nixos-unstable&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">  inputs<span class="token punctuation">.</span>daquotes <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    url <span class="token operator">=</span> <span class="token string">&quot;github:Xe/douglas-adams-quotes&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">    inputs<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>follows <span class="token operator">=</span> <span class="token string">&quot;nixpkgs&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">
        </span><span class="code-line">  outputs <span class="token operator">=</span> <span class="token punctuation">{</span> self<span class="token punctuation">,</span> nixpkgs<span class="token punctuation">,</span> daquotes<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    nixosConfigurations<span class="token punctuation">.</span>douglas<span class="token operator">-</span>adams <span class="token operator">=</span> nixpkgs<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>nixosSystem <span class="token punctuation">{</span>
        </span><span class="code-line">      system <span class="token operator">=</span> <span class="token string">&quot;aarch64-linux&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">      modules <span class="token operator">=</span> <span class="token punctuation">[</span>
        </span><span class="code-line">        daquotes<span class="token punctuation">.</span>nixosModules<span class="token punctuation">.</span>default
        </span><span class="code-line">        <span class="token url">./configuration.nix</span>
        </span><span class="code-line">        <span class="token punctuation">(</span><span class="token punctuation">{</span> pkgs<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">          xe<span class="token punctuation">.</span>services<span class="token punctuation">.</span>douglas<span class="token operator">-</span>adams<span class="token operator">-</span>quotes <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">            enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        </span><span class="code-line">          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        </span><span class="code-line">      <span class="token punctuation">]</span><span class="token punctuation">;</span>
        </span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>To make it import this, first we add a new input that points to the Douglas Adams quotes flake. This then gets threaded into the outputs function, we import the module, and finally enable it on the system.</p>
        <p>(Pause)</p>
        <p>That's it. That's how you enable the service on the VM. Now all that's left is SSHing in and running a nixos-rebuild to enable it.</p>
        <p>I just right-click on the douglas-adams node, ssh in with Tailscale handling the auth, and then run the magic nixos-rebuild command: <code>nixos-rebuild switch --flake /etc/nixos</code> and hit enter.</p>
        <p>And now the source code gets pulled, the package gets built, the service gets created and then we can see that the process is running. Let's prove that it's working:</p>
        <pre><code class="code-highlight"><span class="code-line">[root@douglas-adams:/]# curl http://localhost:8080/quote.json | jq
        </span><span class="code-line">{
        </span><span class="code-line">    &quot;quote&quot;:&quot;The story so far: In the beginning the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move.&quot;,
        </span><span class="code-line">    &quot;person&quot;:&quot;Douglas Adams&quot;,
        </span><span class="code-line">    &quot;source&quot;:&quot;The Restaurant at the End of the Universe&quot;,
        </span><span class="code-line">    &quot;id&quot;:2
        </span><span class="code-line">}
        </span></code></pre>
        <p>Et voila. But, we aren't stopping there. I also enabled serving it with Tailscale Funnel so that you can see it on your phones:</p>
        <pre><code class="code-highlight"><span class="code-line">tailscale serve https / http://localhost:8080
        </span><span class="code-line">tailscale funnel 443 on
        </span></code></pre>
        <p>Get your phones out, I'm gonna be showing a QR Code:</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> For those playing the Xe Iaso blog extended universe home game, visit <a href="https://m85-kongir.shark-harmonic.ts.net/">m85-kongir.shark-harmonic.ts.net</a> instead.</div></div>
        <p>Scan this QR code. You can trust me, right? It's not gonna be a Rick Roll. I'm not that mean. When you do, you'll connect to my VM on my laptop on the conference wifi, yet still exposed to the public internet.</p>
        <p>(Pause for audience to discover that it does in fact work, applause)</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/031.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/031.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/031.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/031.jpg"/></picture></a></figure>
        <p>In conclusion, NixOS modules aren't hard. It's just options to configure systemd or nginx or even Tailscale. It's a function that takes in the state of the world and returns new parts to add to the whole. This gives you a nearly infinite level of composition and logistical freedom to implement whatever you want. Every systemd option is exposed as a NixOS flag. Your programs can become services trivially. It's just that easy. I promise.</p>
        <p>But, now you know how to make your own NixOS modules for fun and (hopefully) profit!</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/033.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/033.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/033.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/033.jpg"/></picture></a></figure>
        <p>Before we get this talk wrapped up, I just want to thank everyone on this list for helping me make this talk shine. Thanks everyone!</p>
        <p>(Pause for applause)</p>
        <figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/034.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/034.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/034.webp"/><img loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/034.jpg"/></picture></a></figure>
        <p>And with that, I've been Xe! Thank you so much for coming to this talk. I hope you've had a good conference and I'll be wandering around in case you have any questions. I've posted a summary of the code samples on my blog at xeiaso.net so you can look into my code some more.</p>
        <p>Oh by the way, if you're looking, Tailscale is hiring. I know it's probably rare to see someone like this at a Linux conference but if you're a Windows expert please let me know. That role has been so hard to fill.</p>
        <p>I try to answer every question I can, but if I don't get to you, please email dynamicuser at xeserv dot us and I'll reply to your questions as soon as I can.</p>
        <p>Thanks again to the All Systems Go organizers for having me here and I hope you continue having a good day. Be well!</p>
        <hr/>
        <p>There was a question about encrypted secrets in NixOS. I suggest using <a href="https://github.com/ryantm/agenix">agenix</a> to have age-encrypted secrets in your NixOS configs. It has you encrypt things against SSH host public keys for your machines. It's a bit of a hack, but it works well enough that it's what I use in prod for my own stuff. This really needs to be solved upstream with proper handling of secret values at the Nix level.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> Why do you need to use something like agenix at all?</div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> Every file in <code>/nix/store</code> is world-readable. Depending on your threat model and if your NixOS configs are open source, this can be fine. If your threat model includes public NixOS configs, this becomes less fine; especially when CI is brought into the mix. You wouldn't want someone to figure out what your secrets are in your CI flow and then exfiltrate <a href="https://tailscale.com/kb/1085/auth-keys/">Tailscale authkeys</a> or something, that could be bad!</div></div>
        <hr/>
        <p><a href="https://cdn.xeiaso.net/file/christine-static/talks/2023/asg-nixos/ASG-nixos.html">Script link</a></p>]]>
      </content:encoded>
      <pubDate>Fri, 15 Sep 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Reaching the Unix Philosophy&apos;s Logical Extreme with Webassembly</title>
      <link>https://xeiaso.net/talks/unix-philosophy-logical-extreme-wasm/</link>
      <guid isPermaLink="false">https://xeiaso.net/talks/unix-philosophy-logical-extreme-wasm/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<br/>
        <video id="615eec37-e94c-4f24-867b-27fea8dd0407" class="not-prose" style="width:100%" controls><source src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/video/index.m3u8" type="application/vnd.apple.mpegurl"/><source src="https://cdn.xeiaso.net/file/christine-static/blog/HLSBROKE.mp4" type="video/mp4"/></video><script type="module">import execFor from '/js/hls.js';
        
        execFor('615eec37-e94c-4f24-867b-27fea8dd0407', 'https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/video/index.m3u8');</script>
        <p><a href="https://youtu.be/QNDvfez6QL0">YouTube link</a> (please let me know if
        the iframe doesn't work for you)</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/001.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/001.webp"/><img alt="Slide 2023/gceu-wasm/001" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/001.jpg"/></picture></figure>
        <p>Good morning Berlin! How're you doing this fine morning? I'm Xe and today I'm gonna talk about something that I'm really excited about:</p>
        <p>WebAssembly. WebAssembly is a compiler target for an imaginary CPU that your phones, tablets, laptops, gaming towers and even watches can run. It's intended to be a level below JavaScript to allow us to ship code in maintainable languages. Today I'm gonna be talking about fun ways you can take advantage of WebAssembly, but first we need to talk about the other main part of this subject:</p>
        <p>Unix. Unix is the sole survivor of the early OS wars. It's not really that exciting from a computer science standpoint other than it was where C became popular and it uses file and filesystem API calls to interface with a lot of hardware.</p>
        <p>Dealing with some source code files? Discover them in the filesystem in your home directory and write to them with the file API.</p>
        <p>Dealing with disks? Discover them in the filesystem and manage them with the file API.</p>
        <p>Design is rooted in philosophy, and Unix has a core philosophy that all the decisions stem from. This is usually quoted as &quot;everything is a file&quot; but what does that even mean? How does that handle things that aren't literally files?</p>
        <p>(Pause)</p>
        <p>And wait, who's this Xe person?</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/007.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/007.webp"/><img alt="Slide 2023/gceu-wasm/007" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/007.jpg"/></picture></figure>
        <p>Like the nice person with that microphone said, I'm Xe. I'm the person that put IPv6 packets into S3 and I work at Tailscale doing developer relations. I'm also the only person I know with the job title of Archmage. I'm a prolific blogger and I live in Ottawa in Canada with my husband.</p>
        <p>I'm also a philosopher. As a little hint for anyone here, when someone openly introduces themselves as a philosopher, you should know you're in for some fun.</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/009.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/009.webp"/><img alt="Slide 2023/gceu-wasm/009" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/009.jpg"/></picture></figure>
        <p>Speaking of fun, I know you got up early for this talk because it sold itself as a WebAssembly talk, but I'm actually going to break a little secret with you. This isn't just a WebAssembly talk. This is an operating systems talk because most of the difficulties with using WebAssembly in the real world are actually operating systems issues. In this talk I'm going to start with the Unix philosophy, talk about how it relates to files, and then I'm gonna circle back to WebAssembly. Really, I promise.</p>
        <p>So, going back to where we were with Unix, what does it mean for everything to be a file? What is a file in the first place?</p>
        <p>In Unix, what we call &quot;files&quot; are actually just kernel objects we can make a bunch of calls to. And in a very Unix way, file handles aren't really opaque values; they are just arbitrary integers that just so happen to be indices into an array that lives in the struct your kernel uses to keep track of open files in that process. That is the main security model for access to files when running untrusted code in Linux processes.</p>
        <p>So with these array indices as arguments to some core system calls you can do some basic calls such as-</p>
        <p>(Pause)</p>
        <p>Actually, now that I think about it, we just spent half an hour sitting and watching that lovely talk on the Go ecosystem. Let's do a little bit of exercise. Get that blood flowing!</p>
        <p>So how many of you can raise your hands? Keep them up, let's get those hands up!</p>
        <p>(Pause)</p>
        <p>Alright, alright, keep them up.</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/016.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/016.webp"/><img alt="Slide 2023/gceu-wasm/016" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/016.jpg"/></picture></figure>
        <p>How many of you have seen one of these 3d printed save icon things in person? If you have, keep your hand up. If not, put it down.</p>
        <p>(Pause)</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/017.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/017.webp"/><img alt="Slide 2023/gceu-wasm/017" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/017.jpg"/></picture></figure>
        <p>How many of you have used one of them in school, at work, or even at home? If you have, keep it up, if not, put it down.</p>
        <p>(Pause)</p>
        <p>Alright, thanks again! One more time!</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/018.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/018.webp"/><img alt="Slide 2023/gceu-wasm/018" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/018.jpg"/></picture></figure>
        <p>How about one of these audio-only VHS tapes? Keep it up or put it down.</p>
        <p>Alright, for those of you with your hands up, it's probably time to schedule that colonoscopy. Take advantage of that socialized medicine! You can put your hands down now, I don't want to be liable.</p>
        <p>(Audience laughs)</p>
        <p>For the gen-zed in the crowd that had no idea what these things are, a cassette tape was what we used to store music on back when there were 9 planets.</p>
        <p>(Audience laughs)</p>
        <p>So when I say files, let's think about these. Cassette tapes. Cassette tapes have the same basic usage properties as files.</p>
        <p>To start, you can read from files and play music from a cassette tape in all that warm analog goodness. You can write to files and record audio to a cassette tape. Know the term &quot;mixtape&quot;? That's where it comes from. You can also open files and insert a cassette tape into a tape player. When you're done with them, you can close files and remove tapes from a tape player. And finally you can fast-forward and rewind the tape to find the song you want. Imagine that Gen Z, imagine having to find your songs on the tape instead of skipping right to them.</p>
        <p>And these same calls work on log files, hard drives, and more. These 5 basic calls are the heart of Unix that everything spills out from, and this basic model gets you so far that it's how this little OS you've never heard of called Plan 9 works.</p>
        <p>But what about things that don't directly map to files? What about network sockets? Network sockets are the abstraction that Unix uses to let applications connect to another computer over a network like the internet. You can open sockets, you can close them, you can read from them, you can write to them. But are they files?</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/026.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/026.webp"/><img alt="Slide 2023/gceu-wasm/026" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/026.jpg"/></picture></figure>
        <p>Turns out, they are! In Unix you use mostly the same calls for dealing with network sockets that you do for files. Network sockets are treated like one of these things: an AUX cable to cassette tape adaptor. This was what we used to use in order to get our MP3 players, CD players, Gameboys, and smartphones connected up to the car stereo. This isn't a bit, we actually used these a lot. Yes, we actually used these. I used one extensively when I was delivering pizzas in high school to get the turn by turn navigation directions read out loud to me. We had no other options before Bluetooth existed. It was our only compromise.</p>
        <p>(Audience laughs)</p>
        <p>How about processes? Those are known to be another hallmark of the Unix philosophy. The Unix philosophy is also understood to be that programs should be filters that take the input and spruce it up for the next stage of the pipeline. Under the hood, are those files?</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/028.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/028.webp"/><img alt="Slide 2023/gceu-wasm/028" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/028.jpg"/></picture></figure>
        <p>Yep! Turns out they're three files: input from the last program in the chain, output to the next program in the chain, and error messages to either a log file or operator. All those pipelines in your shell script abominations that you are afraid to touch (and somehow load-bearing for all of production for several companies) become data passing through those three basic files.</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/029.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/029.webp"/><img alt="Slide 2023/gceu-wasm/029" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/029.jpg"/></picture></figure>
        <p>It's like an assembly line for your data, every step gets its data fed from the output of the last one and then it sends its results to the input of the next one. Errors might to go an operator or a log sink like the journal, but it goes down the chain and lets you do whatever you want. Really, it's a rather elegant design, there's a reason it's lasted for over 50 years.</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/030.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/030.webp"/><img alt="Slide 2023/gceu-wasm/030" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/030.jpg"/></picture></figure>
        <p>So you know how I promised that I'm gonna relate all this back to WebAssembly? Here's when. Now that we understand what Unix is, let's talk about what WebAssembly by itself isn't.</p>
        <p>WebAssembly is a CPU that can run pure functions and then return the results. It can also poke the outside world in a limited capacity, but overall it's a lot more like this in practice:</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/032.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/032.webp"/><img alt="Slide 2023/gceu-wasm/032" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/032.jpg"/></picture></figure>
        <p>A microcontroller. Sure you can use microcontrollers to do a lot of useful things (especially when you throw in temperature sensors and maybe even a GSM shield to send text messages), but the main thing that microcontrollers can't easily do is connect to the Internet or deal with files on storage devices. Pedantically, this is something you can do, but every time it'll need to be custom-built for the hardware in question. There's no operating system in the mix, so everything needs to have bespoke code. Without an operating system, there's no network stack or even processes. This makes it possible, but moderately difficult to reuse existing code from other projects. If you want to do something like run libraries you wrote in Go on the frontend, such as your peer to peer VPN engine and all of its supporting code, you'd need to either do a pile of ridiculous hacks or you'd just need there to be something close to an operating system. Those hacks would be fairly reliable, but I think we can do better.</p>
        <p>(Pause)</p>
        <p>Turns out, you don't need an operating system to fill most of the gaps that are left when you don't have one. In WebAssembly, we have something to fill this gap:</p>
        <p>WASI. WASI is the WebAssembly System Interface. It defines some semantics for how input, output, files, filesystems, and basic network sockets should be implemented for both the guest program and the host environment. This acts like enough of an &quot;operating system&quot; as far as programming languages care. When you get the Go or Rust compiler to target WASI, they'll emit binaries that can run just about anywhere with a WASI runtime.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is enby" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/enby/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>I wonder which thing that runs on several billion devices, including the SIM
        cards in your phones and an alarming number of life-critical devices this
        reminds you of.</p></div></div>
        <p>So circling back on the filesystem angle, one of the key distinctions with how WASI implements filesystem access compared to other operating systems is that there's no expectation for running processes to have access to the host filesystem, or even any filesystem at all. It is perfectly legal for a WASI module to run without filesystem access. More critically for the point I'm trying to build up to though, there are a few files that are guaranteed to exist:</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/028.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/028.webp"/><img alt="Slide 2023/gceu-wasm/028" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/028.jpg"/></picture></figure>
        <p>Standard input, output, and error files. And, you know what this means? This means we can circle back to the Unix idea of WebAssembly programs being filters. You can make a WebAssembly program take input and emit output as one step in a longer process. Just like your pipelines!</p>
        <p>As an example, I have an overcomplicated blog engine that includes its own dialect of markdown because of course it does. After getting nerd sniped by Amos, I rewrote it all in Rust; but when I did that, I separated the markdown parser into its own library and made a little command-line utility for it. I compiled that to WebAssembly with WASI and now I think I'm one of the only people to have successfully distributed a program over the fediverse: the library that I use to convert markdown to HTML, with the furry avatar templates that orange websites hate and all.</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/039.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/039.webp"/><img alt="Slide 2023/gceu-wasm/039" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/039.jpg"/></picture></figure>
        <p>Just to help hammer this all in, I'm going to show you some code I wrote between episodes of anime and donghua. I wrote a little &quot;echo server&quot; that takes a line of input, runs a WebAssembly program on that line of input fed into standard in, and then returns the response from standard out. The first program I'm gonna show off is going to be a &quot;reply with the input&quot; program. Then, I'm going to switch it over to my markdown library I mentioned and write out a message to get turned into HTML. I'm going to connect to it with another WebAssembly program that has a custom filesystem configuration that lets you use the network as a filesystem because WASI's preview 1 API doesn't support making outgoing network connections at the time of writing. If sockets really are just files, then why can't we just use the network stack as a filesystem?</p>
        <p>Now, it's time, let's show off the power of WebAssembly. But first, the adequate prayers are needed: Demo gods, hear my cries. Bless my demo!</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>For obvious reasons it's difficult to put the demo into the transcript, but
        you can find the code for it <a href="https://github.com/Xe/x/tree/master/conferences/gceu23">in
        github.com/Xe/x</a>.</p></div></div>
        <p>On the right hand side I have a terminal running that WebAssembly powered echo server I mentioned. Just to prove I didn't prerecord this, someone yell out something for me to type into the WebAssembly program on the left.</p>
        <p>(Pause for someone to shout something)</p>
        <p>Cool, let's type it in:</p>
        <p>(Type it in and hit enter)</p>
        <p>See? I didn't prerecord this and that lovely member of the audience wasn't a plant to make this easier on me.</p>
        <p>(Audience laughs)</p>
        <p>You know what, while we're at it, let's do a little bit more. I have another version of this set up where it feeds things into that markdown->HTML parser I mentioned. If I write some HTML into there:</p>
        <p>(Type it in and hit enter)</p>
        <p>As you can see, I get the template expanded and all of the HTML goodness has come back to haunt us again. Even though the program on the right is written in Go:</p>
        <p>(I press control-backslash to cause the go runtime to vomit the stack of every goroutine, attempting to prove that there's nothing up my sleeve)</p>
        <p>It's able to run that Rust program like it's nothing.</p>
        <p>(Applause)</p>
        <p>Thank Klaus that all that worked. I'm going to put all the code for this on my GitHub page in my <a href="https://github.com/Xe/x">x repo</a>.</p>
        <p>This technique of embedding Rust programs into Go programs is something I call crabtoespionage. It lets you use the filter property of Unix programs as functions in your Go code. This is how you Rustaceans in crowd can sneak some Rust into prod without having to make sacrifices to the linker gods. I know there's at least one of you out there. Commit the .wasm bytes from rustc or cargo to your repo and then you can still build everything on a Mac, Plan 9, or even TempleOS, assuming you have Go running there.</p>
        <p>Most of the heavy lifting in my examples is done with Wazero, it's a library for Go programs that is basically a WebAssembly VM and some hooks for WASI implemented for you. The flow for embedding Rust programs into Go looks like this:</p>
        <ul>
        <li>First, extract the subset of the library you want and make it a standalone program. This makes it easy to test things on the command line. Use arguments and command line flags, they're there for a reason.</li>
        <li>Next, build that to WASI and fix things until it works. You'll have to figure out how to draw the rest of the owl here. Some things may be impossible depending on facts and circumstances. Usually things should work out.</li>
        <li>Then import wazero into your program and set everything up by using the embed directive to hoist the WebAssembly bytes into your code. Set up the filesystems you want to use, and your runtime config and finally:</li>
        <li>Then make a wrapper function that lets you go from input to output et voila!</li>
        </ul>
        <p>You've just snuck Rust into production. This is how I snuck Rust into prod at work and nobody is the wiser.</p>
        <p>(Pause)</p>
        <p>Wait, I just gave it away, no, oops. Sorry! I had no choice. Mastodon HTML is weird. The Go HTML library is weirder.</p>
        <p>There's a few libraries on GitHub that use this basic technique for more than just piping input to output, they use it to embed C and C++ libraries into Go code. In the case of the regular expressions package, it can be faster than package regexp in some cases. Including the WebAssembly overhead. It's incredible. There's not even that many optimizations for WebAssembly yet!</p>
        <p>No C compiler required! No cross-compiling GCC required! No satanic sacrifices to the dark beings required! It's magic, just without the spell slots.</p>
        <p>So while we're on this, let's take both aspects of this to their logical conclusions. What about plugins for programs? There's plenty of reasons customers would want to have arbitrary plugin code running, and also plenty of reasons for you to fear having to run arbitrary customer plugin code. If we can run things in an isolated sandbox and then define our own filesystem logic: what if we expose application state as a filesystem? Trigger execution of the plugin code based on well-defined events that get piped to standard input. Make open calls fetch values from an API or write new values to that same API.</p>
        <p>This is how the ACME editor for Plan 9 works. It exposes internal application state as a filesystem for plugins to manipulate to their pleasure.</p>
        <p>So, to wrap all of this up:</p>
        <ul>
        <li>When you're dealing with Unix, you're dealing with files, be they source code, hard drives, or network sockets.</li>
        <li>Like anything made around a standards body, even files themselves are lies and anything can be a file if it lies enough in the right way.</li>
        <li>Understanding that everything is founded on these lies frees you from the expectation of trying to stay consistent with them. This lets you run things wherever without having to have a C compiler toolchain for win32 handy.</li>
        <li>Because everything is based on these lies, if you control what lies are being used, you actually end up controlling the truths that users deal with. When you free yourself from the idea of having to stay consistent with previous interpretation of those lies, you are free to do whatever you want.</li>
        </ul>
        <p>How could you use this in your projects to do fantastic new things? The ball's in your court Creators.</p>
        <p>(Applause)</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/057.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/057.webp"/><img alt="Slide 2023/gceu-wasm/057" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/057.jpg"/></picture></figure>
        <p>With all that said, here's a giant list of everyone that's helped me with this talk, the research I put into the talk, and uncountable other things. Thank you so much everyone.</p>
        <p>(Thunderous applause)</p>
        <figure class="xeblog-sides-essential"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/058.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/058.webp"/><img alt="Slide 2023/gceu-wasm/058" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/talks/2023/gceu-wasm/058.jpg"/></picture></figure>
        <p>And with that, I've been Xe! Thank you so much for coming out to Berlin. I'll be wandering around if you have any questions for me, but if I miss it, please do email me at <a href="mailto:crabtoespionage@xeserv.us">crabtoespionage@xeserv.us</a>. I'll reply to your questions, really. My example code is in the conferences folder of my experimental repo <a href="https://github.com/Xe/x">github.com/Xe/x</a>. Otherwise, please make sure to stay hydrated and enjoy the conference! Be well!</p>]]>
      </content:encoded>
      <pubDate>Sun, 27 Aug 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>How to use Tailwind CSS in your Go programs</title>
      <link>https://xeiaso.net/blog/using-tailwind-go/</link>
      <guid isPermaLink="false">https://xeiaso.net/blog/using-tailwind-go/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>When I work on some of my smaller projects, I end up hitting a point where I need more than <a href="https://github.com/Xe/Xess">minimal CSS</a> configuration. I don't want to totally change my development flow to bring in a bunch of complicated toolkits or totally rewrite my frontend in React or something, I just want to make things not look like garbage. Working with CSS by itself can be annoying.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Heck yes it is! I don't like working with CSS because it never really feels
        like I'm making progress. I'm always fighting with it. It's just left me with
        the impression that I'm just fundamentally <em>bad</em> at frontend work.</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Numa is happy" loading="lazy" src="https://cdn.xeiaso.net/sticker/numa/happy/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#numa"><b>Numa</b></a>> <p>TBH, you're not bad at frontend work. You're bad at design. The way you get
        better at design is by doing more attempts at it. You can't get better at
        design by avoiding it. I'm not saying you have to be a designer. I'm saying
        you have to be willing to try.</p><br/><br/><p>Remember: ignorance is the default state.</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>You know, I never really thought about it like that. I guess I'll give it a
        shot.</p></div></div>
        <p>I've found a way to make working with CSS a lot easier for me. I've been starting to use <a href="https://tailwindcss.com/">Tailwind</a> in my personal and professional projects. Tailwind is a CSS framework that makes nearly <a href="https://tailwindcss.com/docs/utility-first">every CSS behavior</a> its own utility class. This means that you can make your HTML and CSS the same file, minimizing context switching between your HTML and CSS files. It also means that you can build your own components out of these utility classes. Here's an example of what it ends up looking like in practice:</p>
        <pre class="language-html"><code class="language-html code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-blue-500 text-white font-bold py-2 px-4 rounded<span class="token punctuation">&quot;</span></span><span class="token punctuation">></span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        </span></code></pre>
        <p>This is a button that has a blue background, white text, is bold, has a padding of 2, and has a rounded border. This looks like a lot of CSS to write for a button, but it's all in one place and can be customized for every button. This is a lot easier to work with than having to context switch between your HTML and CSS files.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>What's that unit in <code>px-2</code>, it's padding on the X axis by two what?</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is happy" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/happy/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>It's
        <a href="https://www.sitepoint.com/understanding-and-using-rem-units-in-css/">rem</a>,
        which is about 16 pixels (assuming you don't change the font size). The exact
        size of rem units can be confusing at first, but you end up internalizing it
        over time. Think about it like this: <code>pr-1</code> is about the size of a space
        between words.</p></div></div>
        <p>One of the biggest downsides is that Tailwind's compiler is written in JavaScript and distributed over <a href="https://www.npmjs.com/">npm</a>. This is okay for people that are experienced JavaScript Touchers, but I am not one of them. Usually when I see that something requires me to use npm, I just close the tab and move on. Thankfully, Tailwind is actually a lot easier to use than you'd think. You really just have to install the compiler (either with npm or as a Nix package) and then run it. You can even set up a watcher to automatically rebuild your CSS file when you change your HTML templates. It's a lot less overhead than you think.</p>
        <h2>Assumptions</h2>
        <p>To make our lives easier, I'm going to assume the following things about your project:</p>
        <ul>
        <li>It is written in Go.</li>
        <li>You are using <a href="https://pkg.go.dev/html/template"><code>html/template</code></a> for your HTML templates.</li>
        <li>You have a <code>static</code> folder that has your existing static assets (eg: <a href="https://alpinejs.dev/">https://alpinejs.dev</a> for interactive components).</li>
        </ul>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is enby" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/enby/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>I can't reccomend Alpine.js enough. It's everything I want out of progressive
        JavaScript enhancement of websites. Combined with Tailwind it is a killer
        combination. Read more about the combination
        <a href="https://devdojo.com/pines">here</a>.</p></div></div>
        <h2>Setup</h2>
        <details><summary>If you are using Nix or NixOS</summary><p>Add the <code>tailwindcss</code> package to your <code>flake.nix</code>'s <code>devShell</code>:</p><pre class="language-nix"><code class="language-nix code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">  inputs<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;github:NixOS/nixpkgs/nixos-unstable&quot;</span><span class="token punctuation">;</span>
        </span><span class="code-line">  outputs <span class="token operator">=</span> <span class="token punctuation">{</span> self<span class="token punctuation">,</span> nixpkgs <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    devShell <span class="token operator">=</span> nixpkgs<span class="token punctuation">.</span>mkShell <span class="token punctuation">{</span>
        </span><span class="code-line">      nativeBuildInputs <span class="token operator">=</span> <span class="token punctuation">[</span> self<span class="token punctuation">.</span>nixpkgs<span class="token punctuation">.</span>tailwindcss <span class="token punctuation">]</span><span class="token punctuation">;</span>
        </span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre><p>Then you should be able to use the <code>tailwindcss</code> command in your shell. Ignore the parts about installing <code>tailwindcss</code> with <code>npm</code>, but you may want to use <code>npm</code> as a script runner or to install other tools. Any time I tell you to use <code>npx tailwindcss</code>, just mentally replace that with <code>tailwindcss</code>.</p></details>
        <p>First you need to install Tailwind's CLI tool. Make sure you have <code>npm</code>/<code>nodejs</code> installed from <a href="https://nodejs.org/en/download/">the official website</a>.</p>
        <p>Then create a <code>package.json</code> file with <code>npm init</code>:</p>
        <pre><code class="code-highlight"><span class="code-line">npm init
        </span></code></pre>
        <p>Once you finish answering the questions (realistically, none of the answers matter here), you can install Tailwind:</p>
        <pre><code class="code-highlight"><span class="code-line">npm install --dev --save tailwindcss
        </span></code></pre>
        <p>Now you need to set up some scripts in your <code>package.json</code> file. You can do this by hand, or you can use <code>npm</code>'s built-in script runner to do it for you. This lets you build your website's CSS with commands like <code>npm run build</code> or make your CSS automatically rebuild with <code>npm run watch</code>. To do this, you need to add the following to your <code>package.json</code> file:</p>
        <pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token punctuation">{</span>
        </span><span class="code-line">  <span class="token comment">// other contents here, make sure to add a trailing comma.</span>
        </span><span class="code-line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tailwindcss build -o static/css/tailwind.css&quot;</span><span class="token punctuation">,</span>
        </span><span class="code-line">    <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tailwindcss build -o static/css/tailwind.css --watch&quot;</span>
        </span><span class="code-line">  <span class="token punctuation">}</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>It's helpful to run <code>npm run watch</code> in another terminal while you're working
        on your website. This will automatically rebuild your CSS file when you change
        your HTML templates.</p></div></div>
        <p>Next you need to make a <code>tailwind.config.js</code> file. This will configure Tailwind with your HTML teplate locations as well as let you set any other options. You can do this by hand, or you can use Tailwind's built-in config generator:</p>
        <pre><code class="code-highlight"><span class="code-line">npx tailwindcss init
        </span></code></pre>
        <p>Then open it up and configure it to your liking. Here's an example of what it looks like when using <a href="https://xeiaso.net/blog/iaso-fonts">Iosevka Iaso</a>:</p>
        <pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'tailwindcss'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>
        </span><span class="code-line">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        </span><span class="code-line">  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./tmpl/*.html&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// This is where your HTML templates / JSX files are located</span>
        </span><span class="code-line">  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">      <span class="token literal-property property">fontFamily</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        </span><span class="code-line">        <span class="token literal-property property">sans</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Iosevka Aile Iaso&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sans-serif&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">        <span class="token literal-property property">mono</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Iosevka Curly Iaso&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;monospace&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">        <span class="token literal-property property">serif</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Iosevka Etoile Iaso&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;serif&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
        </span><span class="code-line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        </span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span></code></pre>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>If you're using Iosevka Iaso fonts, make sure to import them in your
        base/header HTML template:</p></div></div>
        <pre class="language-html"><code class="language-html code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
        </span></span><span class="code-line"><span class="token tag">  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span>
        </span></span><span class="code-line"><span class="token tag">  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.xeiaso.net/static/pkg/iosevka/family.css<span class="token punctuation">&quot;</span></span>
        </span></span><span class="code-line"><span class="token tag"><span class="token punctuation">/></span></span>
        </span></code></pre>
        <p>If you aren't serving your static assets in your Go program already, you can use Go's standard library HTTP server and <a href="https://blog.carlmjohnson.net/post/2021/how-to-use-go-embed/"><code>go:embed</code></a>:</p>
        <pre class="language-go"><code class="language-go code-highlight"><span class="code-line"><span class="token comment">//go:embed static</span>
        </span><span class="code-line"><span class="token keyword">var</span> static embed<span class="token punctuation">.</span>FS
        </span><span class="code-line">
        </span><span class="code-line"><span class="token comment">// assuming you have a net/http#ServeMux called `mux`</span>
        </span><span class="code-line">mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/static/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">FS</span><span class="token punctuation">(</span>static<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        </span></code></pre>
        <p>This will bake your static assets into your Go binary, which is nice for deployment. Things you can't forget are a lot more robust than things you can forget.</p>
        <p>Finally, add a <code>//go:generate</code> directive to your Go program to build your CSS file when you run <code>go generate</code>:</p>
        <pre class="language-go"><code class="language-go code-highlight"><span class="code-line"><span class="token comment">//go:generate npm run build</span>
        </span></code></pre>
        <p>When you change your HTML templates, you can run <code>go generate</code> to rebuild your CSS files.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>Running <code>go generate</code> manually like this isn't as robust as you'd get when
        using
        <a href="https://doc.rust-lang.org/cargo/reference/build-scripts.html"><code>build.rs</code></a> to
        automagically regenerate it at compile time, but this can be mostly fixed by
        having a CI check make sure that all generated files are up to date. I wish we
        could have nice things.</p></div></div>
        <p>Finally, make sure you import your Tailwind build in your HTML template:</p>
        <pre class="language-html"><code class="language-html code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/static/css/tailwind.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/></span></span>
        </span></code></pre>
        <p>Now you can get started with using Tailwind in your HTML templates! I hope this helps.</p>]]>
      </content:encoded>
      <pubDate>Sun, 27 Aug 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>This isn&apos;t the way to speed up Rust compile times</title>
      <link>https://xeiaso.net/blog/serde-precompiled-stupid/</link>
      <guid isPermaLink="false">https://xeiaso.net/blog/serde-precompiled-stupid/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<div class="warning" style="padding-left:1rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:1rem;margin-bottom:1rem"><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>By the way, this problem was fixed with the release of <a href="https://github.com/serde-rs/serde/commit/360606b9a63ba4e594dc20ddf0e20228b60b34cb">serde
        v1.0.185</a>.
        Please enjoy the technical overview of the problem and problem space
        regardless.</p></div></div></div>
        <p>Recently serde, one of the most popular Rust libraries made a decision
        that supposedly sped up compile times by using a precompiled version
        of a procedural macro instead of compiling it on the fly. Like any
        technical decision, there are tradeoffs and advantages to everything.
        I don't think the inherent ecosystem risks in slinging around
        precompiled binaries are worth the build speed advantages, and in this
        article I'm going to cover all of the moving parts for this space.</p>
        <h2>serde</h2>
        <p><a href="https://serde.rs/">serde</a> is one of the biggest libraries in the Rust
        ecosystem. It provides the tooling for serializing and deserializing
        (ser/de) arbitrary data structures into arbitrary formats. The main
        difference between serde and other approaches is that serde <em>doesn't
        prefer an individual encoding format</em>. Compare this struct in Rust vs
        the equivalent struct in Go:</p>
        <pre class="language-rust"><code class="language-rust code-highlight"><span class="code-line"><span class="token attribute attr-name">#[derive(Debug, Deserialize, Eq, PartialEq, Clone, Serialize)]</span>
        </span><span class="code-line"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">WebMention</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    <span class="token keyword">pub</span> source<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        </span><span class="code-line">    <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <pre class="language-go"><code class="language-go code-highlight"><span class="code-line"><span class="token keyword">type</span> WebMention <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    Source <span class="token builtin">string</span>  <span class="token string">`json:&quot;source&quot;`</span>
        </span><span class="code-line">    Title  <span class="token operator">*</span><span class="token builtin">string</span> <span class="token string">`json:&quot;title&quot;`</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>Besides syntax, the main difference is in how the
        serialization/deserialization works. In Go the
        <a href="https://pkg.go.dev/encoding/json">encoding/json</a> package uses
        <a href="https://en.wikipedia.org/wiki/Reflective_programming">runtime
        reflection</a> to
        parse the structure metadata. This does work, but it's expensive
        compared to having all that information already there.</p>
        <p>The way serde works is by having an implementation of
        <a href="https://docs.rs/serde/latest/serde/trait.Deserialize.html">Deserialize</a>
        or
        <a href="https://docs.rs/serde/latest/serde/trait.Serialize.html">Serialize</a>
        on the data types you want to encode or decode. This effectively
        pushes all of the data that is normally inspected at runtime with
        reflection into compile-time data. In the process, this makes the code
        run a little bit faster and more deterministically, but at the cost of
        adding some time at compile time to determine that reflection data up
        front.</p>
        <p>I think this is a fair tradeoff due to the fundamental improvements in
        developer experience. In Go, you have to declare the encoding/decoding
        rules for every codec individually. This can lead to stuctures that
        look like this:</p>
        <pre class="language-go"><code class="language-go code-highlight"><span class="code-line"><span class="token keyword">type</span> WebMention <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    Source <span class="token builtin">string</span>  <span class="token string">`json:&quot;source&quot; yaml:&quot;source&quot; toml:&quot;source&quot;`</span>
        </span><span class="code-line">    Title  <span class="token operator">*</span><span class="token builtin">string</span> <span class="token string">`json:&quot;title&quot; yaml:&quot;title&quot; toml:&quot;source&quot;`</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Hey, in your code you have the struct tag <code>toml:&quot;source&quot;</code> defined on the
        <code>Title</code> field, didn't you mean to say <code>toml:&quot;title&quot;</code>?</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Good catch! The fact that you have to declare the same thing over and over
        again makes it ripe for messing things up in annoyingly trivial ways. It would
        be so much better if this was all declared once. Here's the correct way to tag
        this struct:</p></div></div>
        <pre class="language-go"><code class="language-go code-highlight"><span class="code-line"><span class="token keyword">type</span> WebMention <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        </span><span class="code-line">    Source <span class="token builtin">string</span>  <span class="token string">`json:&quot;source&quot; yaml:&quot;source&quot; toml:&quot;source&quot;`</span>
        </span><span class="code-line">    Title  <span class="token operator">*</span><span class="token builtin">string</span> <span class="token string">`json:&quot;title&quot; yaml:&quot;title&quot; toml:&quot;title&quot;`</span>
        </span><span class="code-line"><span class="token punctuation">}</span>
        </span></code></pre>
        <p>This becomes unwieldy and can make your code harder to read. Some
        codecs get around this by reading and using the same tag rules that
        encoding/json does, but the Rust equivalent works for <em>any</em> codec that
        can be serialized into or deserialized from. That same <code>WebMention</code>
        struct works with JSON, YAML, TOML, <a href="https://msgpack.org/">msgpack</a>,
        or anything else you can imagine. serde is one of the most used
        packages for a reason: it's so convenient and widespread that it's
        widely seen as being effectively in the standard library.</p>
        <p>If you need to add additional behavior such as <a href="https://github.com/Xe/site/blob/f30057e759c604f7fcc700df6e1cbc6027af45f0/src/app/config/markdown_string.rs">parsing a string to
        markdown</a>,
        you can do that with your own implementation of the Deserialize trait.
        I do this with the <a href="https://xeiaso.net/vods">VODs pages</a> in order to define my stream
        VOD information in configuration. The markdown inside strings compiles
        to the HTML you see <a href="https://xeiaso.net/vods/2023/3/cursorless">on the VOD
        page</a>, including the
        embedded video on <a href="https://xeiaso.net/blog/xedn">XeDN</a>. This is incredibly valuable to
        me and something I really want to keep doing until I figure out how to
        switch my site to using something like
        <a href="https://www.contentlayer.dev/">contentlayer</a> and <a href="https://mdxjs.com/">MDX</a>.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>All of the VOD information is stored in <a href="https://dhall-lang.org/">Dhall</a>
        (read: JSON with imports, functions, and static types) files. There's Dhall
        support for serde with
        <a href="https://docs.rs/serde_dhall/latest/serde_dhall/">serde_dhall</a>, which this
        website's code uses heavily for all of the static data. This includes
        <a href="https://xeiaso.net/signalboost">signalboost entries</a>, <a href="https://xeiaso.net/salary-transparency">salary
        transparency</a> data, <a href="https://xeiaso.net/blog/series">blog series</a>
        metadata, and the <a href="https://xeiaso.net/characters">character information sheets</a>.</p></div></div>
        <h2>The downsides</h2>
        <p>It's not all sunshine, puppies and roses though. The main downside to
        the serde approach is the fact that it relies on a procedural macro.
        Procedural macros are effectively lisp-style &quot;syntax hygenic&quot; macros.
        Effectively you can view them as a function that takes in some syntax,
        does stuff to it, and then returns the result to be compiled in the
        program.</p>
        <p>This is how it can derive the serialization/deserialization code, it
        takes the tokens that make up the struct type, walks through the
        fields, and inserts the correct serialization or deserialization code
        so that you can construct values correctly. If it doesn't know how to
        deal with a given type, it will blow up at compile-time, meaning that
        you may need to resort to <a href="https://serde.rs/remote-derive.html">increasingly annoying
        hacks</a> to get things working.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Pedantically, this whole support works at the language token level, not at the
        type level. You need to write wrappers around remote types in order to add
        serde support because proc macros don't have access to the tokens that make up
        other type definitions. You <em>could</em> do all of this at compile time in theory
        with a perfectly spherical compiler that supports type-level metaprogramming,
        but the Rust compiler of today can't do that.</p></div></div>
        <p>When you <a href="https://doc.rust-lang.org/reference/procedural-macros.html">write your own procedural
        macro</a>,
        you create a separate crate for this. This separate crate is compiled
        against a special set of libraries that allow it to take tokens from
        the Rust compiler and emit tokens back to the rust compiler. These
        compiled proc macros are run as dynamic libraries inside invocations
        of the Rust compiler. This means that proc macros can do <em>anything</em> as
        the permissions of the Rust compiler, including crashing the compiler,
        stealing your SSH key and uploading it to a remote server, running
        arbitrary commands with sudo power, and much more.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>To be fair, most people do use this power for good. The library
        <a href="https://github.com/launchbadge/sqlx">sqlx</a> will allow you to check your query
        syntax against an actual database to ensure that your syntax is correct (and
        so they don't have to implement a compliant parser for every
        dialect/subdialect of SQL). You could also envision many different worlds
        where people would do behavior that sounds suspect (such as downloading API
        schema from remote servers), but it provides such a huge developer experience
        advantage that the tradeoff would be worth the downsides. Everything's a
        tradeoff.</p></div></div>
        <h2>A victim of success</h2>
        <p>Procedural macros are not free. They take nonzero amounts of time to
        run because they are effectively extending the compiler with arbitrary
        extra behavior at runtime. This gives you a lot of power to do things
        like what serde does, but as more of the ecosystem uses it more and
        more, it starts taking nontrivial amounts of time for the macros to
        run. This causes more and more of your build time being spent waiting
        around for a proc macro to finish crunching things, and if the proc
        macro isn't written cleverly enough it will potentially waste time
        doing the same behavior over and over again.</p>
        <p>This can slow down build times, which make people investigate the
        problem and (rightly) blame serde for making their builds slow.
        Amusingly enough, serde is used by the Rust compiler rustc and package
        manager cargo. This means that the extra time compiling proc macros
        are biting literally everyone, including the Rust team.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hmm" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hmm/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>Keep in mind though
        that the Rust compiler is already <em>very damn fast</em>. One of the
        standard benchmarks we use across hardware is the &quot;how fast do you
        compile <a href="https://github.com/Xe/site">xesite</a>&quot; test. Xesite is a fairly
        complicated Rust program that uses a bunch of crates and weird
        language features like the procedural macro
        <a href="https://maud.lambda.xyz/">maud</a> to generate HTML. If you want to run
        the benchmark for yourself, install
        <a href="https://github.com/sharkdp/hyperfine">hyperfine</a> and run the
        following command:</p><pre><code class="code-highlight"><span class="code-line">hyperfine --prepare &quot;cargo clean&quot; &quot;cargo build --release&quot;
        </span></code></pre><p>Here's the results on our new MacBook Pro M2 Max:</p><pre><code class="code-highlight"><span class="code-line">$ hyperfine --prepare &quot;cargo clean&quot; &quot;cargo build --release&quot;
        </span><span class="code-line">Benchmark 1: cargo build --release
        </span><span class="code-line">  Time (mean ± σ):     41.872 s ±  0.295 s    [User: 352.774 s, System: 22.339 s]
        </span><span class="code-line">  Range (min … max):   41.389 s … 42.169 s    10 runs
        </span></code></pre><p>In comparison, the homelab shellbox machine that
        production builds are made on scores this much:</p><pre><code class="code-highlight"><span class="code-line">$ hyperfine --prepare &quot;cargo clean&quot; &quot;cargo build --release&quot;
        </span><span class="code-line">Benchmark 1: cargo build --release
        </span><span class="code-line">  Time (mean ± σ):     103.852 s ±  0.654 s    [User: 1058.321 s, System: 42.296 s]
        </span><span class="code-line">  Range (min … max):   102.272 s … 104.843 s    10 runs
        </span></code></pre><p>Procedural macros are plenty fast, it's always a
        tradeoff because they always could be faster. For additional timing
        information about xesite builds, look at the <a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/serde/cargo-timing-20230819T184813Z.html">timing
        report</a>.</p></div></div>
        <h2>The change</h2>
        <p>In essence, the change makes serde's derive macro use a precompiled
        binary instead of compiling a new procedural macro binary every time
        you build the serde_derive dependency. This removes the need for that
        macro to be compiled from source, which can speed up build times
        across the entire ecosystem in a few cases.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>To be fair, this precompiled binary fiasco only affects x86_84/amd64 Linux
        hosts. The majority of CI runs on the planet use x86_64 Linux hosts. Given
        how much of a meme &quot;Rust has slow compile times&quot; has become over the last
        decade, it makes sense that something had to give. It would be nice if this
        affected more than <em>cold</em> CI runs (IE: ones without a pre-populated build
        cache), but I guess this is the best they can do given the constraints of the
        compiler as it exists today.</p></div></div>
        <p>However, this means that the most commonly used crate is shipping an
        arbitrary binary for production builds without any way to opt-out.
        This could allow a sufficiently determined attacker to use the
        serde<em>derive library as a way to get code execution on _every CI
        instance where Rust is used</em> at the same time.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Can't you do this anyways with a proc macro given that it's a dynamic library
        in the compiler?</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Well, yeah, sure. The main difficulty is that when you're doing it in a proc
        macro you have to have the code in a human-readable format somewhere along the
        line. This would allow users to discover that the version of the code
        distributed with the crate differs from the version inside source control
        fairly trivially. Compare this to what you'd have to do in order to determine
        if a binary is compiled from different source code. That requires a completely
        different set of skills than comparing source code.</p><p>Combine that with the fact that the Rust ecosystem doesn't currently have a solid
        story around cryptographic signatures for crates and you get a pretty terrible
        situation all around.</p><figure class="max-w-3xl mx-auto"><a href="https://cdn.xeiaso.net/file/christine-static/blog/2023/serde/gpg-ux.jpg"><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/serde/gpg-ux.avif"/><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/blog/2023/serde/gpg-ux.webp"/><img alt="A meme with the text 'society if society if GPG had a decent user experience'" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/blog/2023/serde/gpg-ux.jpg"/></picture></a><figcaption>A meme with the text 'society if society if GPG had a decent user experience'</figcaption></figure></div></div>
        <p>But this does speed things up for everyone...at the cost of using serde
        as a weapon to force ecosystem change.</p>
        <p>In my testing the binary they ship is a statically linked Linux
        binary:</p>
        <pre><code class="code-highlight"><span class="code-line">$ file ./serde_derive-x86_64-unknown-linux-gnu
        </span><span class="code-line">./serde_derive-x86_64-unknown-linux-gnu: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), static-pie linked, BuildID[sha1]=b8794565e3bf04d9d58ee87843e47b039595c1ff, stripped
        </span><span class="code-line">
        </span><span class="code-line">$ ldd ./serde_derive-x86_64-unknown-linux-gnu
        </span><span class="code-line">        statically linked
        </span></code></pre>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>Note: you should <a href="https://catonmat.net/ldd-arbitrary-code-execution">never run <code>ldd</code> on untrusted
        executables</a>. <code>ldd</code> works
        by setting the environment variable <code>LD_TRACE_LOADED_OBJECTS=1</code> and then
        executing the command. This causes your system's C dynamic linker/loader to
        print all of the dependencies, however malicious applications can and will
        still execute their malicious code even when that environment variable is set.
        I've seen evidence of applications exhibiting different malicious behavior
        when that variable is set. Stay safe and use virtual machines when dealing
        with unknown code.</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Numa is delet" loading="lazy" src="https://cdn.xeiaso.net/sticker/numa/delet/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#numa"><b>Numa</b></a>> <p>To <a href="https://scholar.harvard.edu/files/mickens/files/towashitallaway.pdf">misquote James
        Mickens</a>,
        the best way to find out what something does is by executing it to discover
        more clues.</p></div></div>
        <details><summary>Out of date &quot;file not found&quot; error with a friend using cargo2nix</summary><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>This is out of date. The friend of mine in question has since rebooted their
        system and cannot reproduce this problem. We assume rac's machine got
        bitflipped or something.</p></div></div><p>Frustratingly, a friend of mine that uses
        <a href="https://github.com/cargo2nix/cargo2nix">cargo2nix</a> is reporting
        getting a &quot;file not found&quot; error when trying to build programs
        depending on serde. This is esepecially confusing given that the
        binary is a statically linked binary, but I guess we'll figure out
        what's going on in the future.</p><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Wait, but if the proc macro binary exists how could the file not be found?</p></div></div><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>That's the fun part. That error message doesn't just show up when you ask the
        computer to run a binary that doesn't exist. It also shows up when the binary
        is loading and the kernel is loading the dynamically linked dependencies. So
        the program binary can exist but if a dynamic dependecy doesn't, it'll bail
        and fail like that.</p></div></div><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Yeeep, this is one of the worst errors in the Linux ecosystem. Don't feel bad
        about it being confusing, this bites <em>everyone</em> eventually. The first time I
        encountered it, I spent more time than I'm comfortable admitting figuring it
        out. I had to resort to using strace. I felt like a massive idiot when I
        figured it out.</p></div></div></details>
        <p>There's also additional concerns around <a href="https://github.com/serde-rs/serde/issues/2538#issuecomment-1684117378">the binary in question not
        being totally
        reproducible</a>,
        which is slightly concerning from a security standpoint. If we're
        going to be trusting some random guy's binaries, I think we are in the
        right to demand that it is byte-for-byte reproducible on commodity
        hardware without having to reverse-engineer the build process and
        figure out which <em>nightly version of the compiler</em> is being used to
        compile this binary blob that will be run everywhere.</p>
        <p>I also can't imagine that distribution maintainers are happy with this
        now that Rust is basically required to be in distribution package
        managers. It's unfortunate to see <a href="https://crates.io/">crates.io</a> turn
        from a source code package manager to a binary package manager like
        this.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Numa is delet" loading="lazy" src="https://cdn.xeiaso.net/sticker/numa/delet/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#numa"><b>Numa</b></a>> <p>Nah, trust me bro. It's totes a legit binary, don't think about it so much and
        just run this arbitrary code on your system. What could go wrong?</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Uhhhh, a lot??? Especially if this becomes a common practice that is validated
        by the biggest project using it. This feels like it could have a massive
        chilling effect across the entire ecosystem where this behavior becomes more
        normalized and expected. I don't know if I'd want to see that become a
        reality.</p></div></div>
        <h3>This doesn't even make build times faster</h3>
        <p>The most frustrating part about this whole affair is that while I was
        writing the majority of this article, I assumed that it actually sped
        up compliation. Guess what: it only speeds up compilation when you
        are doing a brand new build without an existing build cache. In many
        cases this means that you only gain the increased build speed in very
        limited cases: when you are doing a brand new clean build or when you
        update serde_derive.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>I guess these are some semi-common usecases where this would be useful, but I
        don't think this is worth the extra threat vector.</p></div></div>
        <p>This would be much more worth the tradeoff if it actually gave a
        significant compile speed tradeoff, but in order for this to make
        sense you'd need to be building many copies of serde_derive in your
        CI builds constantly. Or you'd need to have every procedural macro in
        the ecosystem also follow this approach. Even then, you'd probably
        only save about 20-30 seconds in cold builds on extreme cases. I
        really don't think it's worth it.</p>
        <h2>The middle path</h2>
        <p>Everything sucks here. This is a Kobayashi Maru situation. In order to
        really obviate the need for these precompiled binary blobs being used
        to sidestep compile time you'd need a complete redesign of the
        procedural macro system.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is angy" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/angy/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>Or, you'd need the proper compile-time reflection support that
        <a href="https://thephd.dev/">ThePHD</a> was going to work on until the whole RustConf
        debacle happened. This would entirely obviate the need for the derive macro
        serde uses in its current form. We could have had nice things.</p></div></div>
        <p>One of the huge advantages of the proc macro system as it currently
        exists is that you can easily use any Rust library you want at compile
        time. This makes doing things like generating C library bindings on
        the fly using <a href="https://rust-lang.github.io/rust-bindgen/"><code>bindgen</code></a>
        trivial.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>How does that work though? It can't do something awful like parsing the C/C++
        headers manually, can it?</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Numa is happy" loading="lazy" src="https://cdn.xeiaso.net/sticker/numa/happy/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#numa"><b>Numa</b></a>> <p>That's the neat part, it actually does do that by using
        <a href="https://clang.llvm.org/">clang</a>'s C/C++ parser!</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>That's horrifying.</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is hacker" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/hacker/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>It is yeah, but this is what you have to do in the real world to get things
        working. It's worth noting that you don't have to always do this at compile
        time. You can commit the intermediate code to your git repo or <a href="https://github.com/tailscale/pam/blob/main/cmd/pam_tailscale/src/pam.rs">write your
        bindings by
        hand</a>,
        but I think it's better to take the build speed loss and have things get
        generated for you so you can't forget to do it.</p></div></div>
        <p>Maybe there could be a lot of speed to be gained with aggressive
        caching of derived compiler code. I think that could solve a lot of
        the issues at the cost of extra disk space being used. Disk space is
        plenty cheap though, definitely cheaper than developer time. The
        really cool advantage of making it at the derive macro level is that
        it would also apply for traits like
        <a href="https://doc.rust-lang.org/std/fmt/trait.Debug.html">Debug</a> and
        <a href="https://doc.rust-lang.org/std/clone/trait.Clone.html">Clone</a> that are
        commonly derived anyways.</p>
        <p>I have no idea what the complexities and caveates of doing this would
        be, but it could also be interesting to have the crate publishing step
        do aggressive borrow checking logic for every supported platform but
        then disable the borrow checker on crates downloaded from crates.io.
        The borrow checker contributes a lot of time to the compilation
        process, and if you gate acceptance to crates.io on the borrow checker
        passing then you can get away without needing to run the extra borrow
        checker logic when compiling dependencies.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Yeah but when the borrow checker changes behavior slightly within the same
        Rust edition, what happens? What if there is a bug that allows something to
        pass muster in one version of rustc that shouldn't be allowed, making the code
        in crates.io fundamentally wrong?</p></div></div>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>I claimed ignorance of the problems for a reason! I realize that this would
        nearly impossible in practice, but I feel like this could be more of a viable
        option than telling people it's okay to put binaries in the mostly source-code
        based package store that is <a href="https://crates.io/">crates.io</a>.</p></div></div>
        <details><summary>Tangent about using WebAssembly</summary><h3>WASM for procedural macros?</h3><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>> <p>Wait, how is this relevant here? This seems like a nonsequitor, doing proc
        macro compliation/running with WebAssembly would undoubtedly be slower, right?
        If only going by the rule that a layer of abstraction is by definition more
        overhead than not having it?</p></div></div><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>The maintainer of serde is also the creator of
        <a href="https://github.com/dtolnay/watt">watt</a>, a runtime for executing precompiled
        procedural macros with WebAssembly. Adopting a solution like this would vastly
        improve the security, isolation, and reproducibility of procedural macros. I
        really wish this was more widespread. With optimizations such as adopting
        <a href="https://wasmtime.dev/">wasmtime</a> for executing these proc macros, it could be
        made a lot faster on standard development/production environments while also
        not leaving people on obscure targets like rv64-gc in the dust.</p><br/><br/><p>I'm also pretty sure that there is an easier argument to be made for shipping easily
        replicatable WASM blobs <a href="https://ziglang.org/news/goodbye-cpp/">like Zig does</a>
        instead of shipping around machine code like serde does.</p></div></div><p>One of the core issues with procedural macros is that they run
        unsandboxed machine code. Sandboxing programs is basically impossible
        to do cross-platform without a bunch of ugly hacks at every level.</p><p>I guess you'd need to totally rewrite the proc macro system to use
        <a href="https://webassembly.org/">WebAssembly</a> instead of native machine
        code. Doing this with WebAssembly would let the Rust compiler control
        the runtime environment that applications would run under. This would
        let packages do things like:</p><ul>
        <li>Declare what permissions it needs and have permissions changes on
        updates to the macros cause users to have to confirm them</li>
        <li>Declare &quot;cache storage&quot; so that things like derive macro
        implementations could avoid needing to recompute code that has
        already passed muster.</li>
        <li>Let people ship precompiled binaries without having to worry as much
        about supporting every platform under the sun. The same binary would
        run perfectly on every platform.</li>
        <li>More easily prove reproducibility of the proc macro binaries,
        especially if the binaries were built on the crates.io registry
        server somehow.</li>
        <li>Individually allow/deny execution of commands so that common
        behaviors like <code>bindgen</code>, <code>pkg-config</code>, and compiling embedded C
        source code continue working.</li>
        </ul><p>This would require <em>a lot</em> of work and would probably break a lot of
        existing proc macro behavior unless care was taken to make things as
        compatible. One of the main pain points would be dealing with C
        dependencies as it is nearly impossible* to deterministically prove
        where the dependencies in question are located without running a bunch
        of shell script and C code.</p><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is coffee" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/coffee/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>*If you are using Nix, this is trivial, but sadly we aren't at a place where
        Nix is used by everyone yet.</p></div></div><p>One of the biggest headaches would be making a WebAssembly JIT/VM that
        would work well enough across platforms that the security benefits
        would make up for the slight loss in execution speed. This is
        annoyingly hard to sell given that the current state of the world is
        suffering from long compilation times. It also doesn't help that
        WebAssembly is still very relatively new so there's not yet the level
        of maturity needed to make things stable. There is a POSIX-like layer
        for WebAssembly programs called <a href="https://wasi.dev/">WASI</a> that does
        bridge a lot of the gap, but it misses a lot of other things that
        would be needed for full compatibility including network socket and
        subprocess execution support.</p><div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Mara is happy" loading="lazy" src="https://cdn.xeiaso.net/sticker/mara/happy/128"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#mara"><b>Mara</b></a>> <p>There is an extension to WASI called <a href="https://wasix.org/">WASIX</a> that does
        solve nearly all of the compatibility problems, but WASIX isn't standard yet
        and my runtime of choice <a href="https://wazero.io/">wazero</a> doesn't have out-of-the
        box support for it yet. Hopefully <a href="https://github.com/tetratelabs/wazero/issues/1495">it will be supported
        soon</a>! I just wish it
        wasn't associated to the wasmer mark of Cain.</p></div></div></details>
        <hr/>
        <p>This entire situation sucks. I really wish things were better.
        Hopefully the fixes in
        <a href="https://github.com/serde-rs/serde/pull/2580">serde-rs/serde#2580</a>
        will be adopted and make this entire thing a non-issue. I understand
        why the serde team is making the decisions they are, but I just keep
        thinking that this isn't the way to speed up Rust compile times. There
        has to be other options.</p>
        <p>I don't know why they made serde a malware vector by adding this
        unconditional precompiled binary in a patch release in exchange for
        making cold builds in CI barely faster.</p>
        <p>The biggest fear I have is that this practice becomes widespread
        across the Rust ecosystem. I really hate that the Rust ecosystem seems
        to have so much drama. It's scaring people away from using the tool to
        build scalable and stable systems.</p>
        <div class="my-4 flex space-x-4 rounded-md border border-solid border-fg-4 bg-bg-2 p-3 dark:border-fgDark-4 dark:bg-bgDark-2 max-w-full"><div class="flex max-h-16 shrink-0 items-center justify-center self-center"><img style="max-height:6rem" alt="Cadey is percussive-maintenance" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/percussive-maintenance/64"/></div><div class="convsnippet min-w-0 self-center">&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>> <p>I mean at some level, to be in a community is to eventually cause conflict.
        I'm not tired of the conflicts existing, I'm tired of the conflicts being
        poorly handled and spilling out into GitHub hellthreads that leave everyone
        unhappy. Let's hope this event doesn't spill out into even more intelligent
        and highly capable people burning out and leaving.</p></div></div>]]>
      </content:encoded>
      <pubDate>Sat, 26 Aug 2023 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>